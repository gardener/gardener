name: Build

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        default: snapshot
        description: |
          the mode to use. either `snapshot` or `release`. Will affect effective version, as well
          as target-oci-registry.

jobs:
  prepare:
    uses: gardener/cc-utils/.github/workflows/prepare.yaml@master
    with:
      mode: ${{ inputs.mode }}
      version-commit-callback-action-path:
    permissions:
      contents: read

  tests:
    runs-on: ${{ github.repository_owner == 'gardener' && 'ubuntu-latest-large' || 'ubuntu-latest' }}
    steps:
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
      - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
      - uses: actions/setup-go@v6
        with:
          go-version: '1.25'
      - name: run-tests
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p /tmp/blobs.d
          if [ '${{ inputs.mode }}' == 'release' ]; then
            make verify-extended |& tee /tmp/blobs.d/tests-log.txt
            tar czf /tmp/blobs.d/tests-log.tar.gz -C /tmp/blobs.d tests-log.txt
          else
            # tests are run using prow for non-release-runs, so early-exit
            echo "dummy" > /tmp/blobs.d/tests-log.tar.gz
            exit 0
          fi
      - name: add-tests-report-to-component-descriptor
        uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          blobs-directory: /tmp/blobs.d
          ocm-resources: |
            name: test-results
            relation: local
            access:
              type: localBlob
              localReference: tests-log.tar.gz
            labels:
              - name: gardener.cloud/purposes
                value:
                  - test

  sast-lint:
    uses: gardener/cc-utils/.github/workflows/sastlint-ocm.yaml@master
    permissions:
      contents: read
    with:
      linter: gosec
      run: |
        if [ '${{ inputs.mode }}' != 'release' ]; then
          # tests are run using prow for non-release-runs, so exit early
          mkdir /tmp/blobs.d
          echo "dummy" > /tmp/blobs.d/gosec-report.tar.gz
          exit 0
        fi
        git config --global user.email some.one@some.where
        git config --global user.name 'Some One'
        make sast-report

  oci-images:
    name: Build OCI-Images
    needs:
      - prepare
      - tests
      - sast-lint
    permissions:
      contents: read
      packages: write
      id-token: write
    secrets: inherit
    uses: gardener/cc-utils/.github/workflows/oci-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: admission-controller
            target: admission-controller
            oci-repository: gardener/admission-controller
          - name: apiserver
            target: apiserver
            oci-repository: gardener/apiserver
          - name: controller-manager
            target: controller-manager
            oci-repository: gardener/controller-manager
          - name: gardenlet
            target: gardenlet
            oci-repository: gardener/gardenlet
          - name: operator
            target: operator
            oci-repository: gardener/operator
          - name: resource-manager
            target: resource-manager
            oci-repository: gardener/resource-manager
          - name: scheduler
            target: scheduler
            oci-repository: gardener/scheduler
          - name: node-agent
            target: node-agent
            oci-repository: gardener/node-agent
    with:
      name: ${{ matrix.args.name }}
      version: ${{ needs.prepare.outputs.version }}
      target: ${{ matrix.args.target }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.oci-repository }}
      oci-platforms: linux/amd64,linux/arm64
      ocm-labels:
      extra-tags: latest

  helmcharts:
    name: Build Helmcharts
    needs:
      - prepare
      - oci-images
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: gardener/cc-utils/.github/workflows/helmchart-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: controlplane
            dir: charts/gardener/controlplane
            oci-repository: charts/gardener
            ocm-mappings:
              - ref: ocm-resource:admission-controller.repository
                attribute: global.admission.image.repository
              - ref: ocm-resource:admission-controller.tag
                attribute: global.admission.image.tag
              - ref: ocm-resource:apiserver.repository
                attribute: global.apiserver.image.repository
              - ref: ocm-resource:apiserver.tag
                attribute: global.apiserver.image.tag
              - ref: ocm-resource:controller-manager.repository
                attribute: global.controller.image.repository
              - ref: ocm-resource:controller-manager.tag
                attribute: global.controller.image.tag
              - ref: ocm-resource:scheduler.repository
                attribute: global.scheduler.image.repository
              - ref: ocm-resource:scheduler.tag
                attribute: global.scheduler.image.tag
          - name: gardenlet
            dir: charts/gardener/gardenlet
            oci-repository: charts/gardener
            ocm-mappings:
              - ref: ocm-resource:gardenlet.repository
                attribute: image.repository
              - ref: ocm-resource:gardenlet.tag
                attribute: image.tag
          - name: operator
            dir: charts/gardener/operator
            oci-repository: charts/gardener
            ocm-mappings:
              - ref: ocm-resource:operator.repository
                attribute: image.repository
              - ref: ocm-resource:operator.tag
                attribute: image.tag
          - name: resource-manager
            dir: charts/gardener/resource-manager
            oci-repository: charts/gardener
            ocm-mappings:
              - ref: ocm-resource:resource-manager.repository
                attribute: global.image.repository
              - ref: ocm-resource:resource-manager.tag
                attribute: global.image.tag
    with:
      name: ${{ matrix.args.name }}
      dir: ${{ matrix.args.dir }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.oci-repository }}
      ocm-mappings: ${{ toJSON(matrix.args.ocm-mappings) }}

  gardenadm:
    permissions:
      contents: read
    needs:
      - tests
      - sast-lint
    strategy:
      matrix:
        args:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
          - os: darwin
            arch: amd64
            runner: ubuntu-latest
          - os: darwin
            arch: arm64
            runner: ubuntu-24.04-arm
          - os: windows
            arch: amd64
            runner: ubuntu-latest
          - os: windows
            arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.args.runner }}
    steps:
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
      - uses: actions/setup-go@v6
        with:
          go-version: '1.25'
      - name: build-garden-adm
        shell: bash
        run: |
          set -euo pipefail

          ld_flags="$(hack/get-build-ld-flags.sh)"
          os=${{ matrix.args.os }}
          arch=${{ matrix.args.arch }}

          if [ ${os} == 'windows' ]; then
            exe_suffix='.exe'
            archive_suffix='.zip'
          else
            exe_suffix=''
            archive_suffix='.tar.gz'
          fi

          mkdir -p /tmp/blobs.d
          prefix=/tmp/blobs.d/gardenadm
          platform_suffix="-${os}-${arch}"
          outpath="${prefix}${platform_suffix}${exe_suffix}${archive_suffix}"
          archive="${prefix}${platform_suffix}.archive"

          GOOS=${os} \
          GOARCH=${arch} \
          LD_FLAGS=${ld_flags} \
          BUILD_PACKAGES=./cmd/gardenadm \
          BUILD_OUTPUT_FILE=${outpath} \
            make build

          echo "built into ${outpath}"

          if ${{ matrix.args.os == 'windows' }}; then
            (
              cd $(dirname ${outpath})
              zip -j ${archive} $(basename ${outpath})
            )
          else
            tar cvzf ${archive} -C/tmp/blobs.d $(basename ${outpath})
          fi

          unlink ${outpath}
      - uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          blobs-directory: /tmp/blobs.d
          ocm-resources: |
            name: gardenadm
            relation: local
            type: executable
            extraIdentity:
              os: ${{ matrix.args.os }}
              architecture: ${{ matrix.args.arch }}
            access:
              type: localBlob
              localReference: >-
                gardenadm-${{ matrix.args.os }}-${{ matrix.args.arch }}.archive
