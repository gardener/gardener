// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/extensions/pkg/controller/worker (interfaces: Actuator)
//
// Generated by this command:
//
//	mockgen -destination=mocks.go -package=mock github.com/gardener/gardener/extensions/pkg/controller/worker Actuator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	controller "github.com/gardener/gardener/extensions/pkg/controller"
	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
)

// MockActuator is a mock of Actuator interface.
type MockActuator struct {
	ctrl     *gomock.Controller
	recorder *MockActuatorMockRecorder
	isgomock struct{}
}

// MockActuatorMockRecorder is the mock recorder for MockActuator.
type MockActuatorMockRecorder struct {
	mock *MockActuator
}

// NewMockActuator creates a new mock instance.
func NewMockActuator(ctrl *gomock.Controller) *MockActuator {
	mock := &MockActuator{ctrl: ctrl}
	mock.recorder = &MockActuatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActuator) EXPECT() *MockActuatorMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockActuator) Delete(arg0 context.Context, arg1 logr.Logger, arg2 *v1alpha1.Worker, arg3 *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActuatorMockRecorder) Delete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActuator)(nil).Delete), arg0, arg1, arg2, arg3)
}

// ForceDelete mocks base method.
func (m *MockActuator) ForceDelete(arg0 context.Context, arg1 logr.Logger, arg2 *v1alpha1.Worker, arg3 *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDelete indicates an expected call of ForceDelete.
func (mr *MockActuatorMockRecorder) ForceDelete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDelete", reflect.TypeOf((*MockActuator)(nil).ForceDelete), arg0, arg1, arg2, arg3)
}

// Migrate mocks base method.
func (m *MockActuator) Migrate(arg0 context.Context, arg1 logr.Logger, arg2 *v1alpha1.Worker, arg3 *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockActuatorMockRecorder) Migrate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockActuator)(nil).Migrate), arg0, arg1, arg2, arg3)
}

// Reconcile mocks base method.
func (m *MockActuator) Reconcile(arg0 context.Context, arg1 logr.Logger, arg2 *v1alpha1.Worker, arg3 *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockActuatorMockRecorder) Reconcile(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockActuator)(nil).Reconcile), arg0, arg1, arg2, arg3)
}

// Restore mocks base method.
func (m *MockActuator) Restore(arg0 context.Context, arg1 logr.Logger, arg2 *v1alpha1.Worker, arg3 *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockActuatorMockRecorder) Restore(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockActuator)(nil).Restore), arg0, arg1, arg2, arg3)
}
