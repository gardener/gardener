// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/utils/kubernetes/client (interfaces: Cleaner,GoneEnsurer)
//
// Generated by this command:
//
//	mockgen -package=mock -destination=mocks.go github.com/gardener/gardener/pkg/utils/kubernetes/client Cleaner,GoneEnsurer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	client "github.com/gardener/gardener/pkg/utils/kubernetes/client"
	gomock "go.uber.org/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCleaner is a mock of Cleaner interface.
type MockCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockCleanerMockRecorder
	isgomock struct{}
}

// MockCleanerMockRecorder is the mock recorder for MockCleaner.
type MockCleanerMockRecorder struct {
	mock *MockCleaner
}

// NewMockCleaner creates a new mock instance.
func NewMockCleaner(ctrl *gomock.Controller) *MockCleaner {
	mock := &MockCleaner{ctrl: ctrl}
	mock.recorder = &MockCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleaner) EXPECT() *MockCleanerMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockCleaner) Clean(ctx context.Context, c client0.Client, obj runtime.Object, opts ...client.CleanOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, c, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clean", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockCleanerMockRecorder) Clean(ctx, c, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, c, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockCleaner)(nil).Clean), varargs...)
}

// MockGoneEnsurer is a mock of GoneEnsurer interface.
type MockGoneEnsurer struct {
	ctrl     *gomock.Controller
	recorder *MockGoneEnsurerMockRecorder
	isgomock struct{}
}

// MockGoneEnsurerMockRecorder is the mock recorder for MockGoneEnsurer.
type MockGoneEnsurerMockRecorder struct {
	mock *MockGoneEnsurer
}

// NewMockGoneEnsurer creates a new mock instance.
func NewMockGoneEnsurer(ctrl *gomock.Controller) *MockGoneEnsurer {
	mock := &MockGoneEnsurer{ctrl: ctrl}
	mock.recorder = &MockGoneEnsurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoneEnsurer) EXPECT() *MockGoneEnsurerMockRecorder {
	return m.recorder
}

// EnsureGone mocks base method.
func (m *MockGoneEnsurer) EnsureGone(ctx context.Context, c client0.Client, obj runtime.Object, opts ...client0.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, c, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnsureGone", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureGone indicates an expected call of EnsureGone.
func (mr *MockGoneEnsurerMockRecorder) EnsureGone(ctx, c, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, c, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureGone", reflect.TypeOf((*MockGoneEnsurer)(nil).EnsureGone), varargs...)
}
