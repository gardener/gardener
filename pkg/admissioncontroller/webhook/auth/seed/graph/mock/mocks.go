// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/admissioncontroller/webhook/auth/seed/graph (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -package mock -destination=mocks.go github.com/gardener/gardener/pkg/admissioncontroller/webhook/auth/seed/graph Interface
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	graph "github.com/gardener/gardener/pkg/admissioncontroller/webhook/auth/seed/graph"
	gomock "go.uber.org/mock/gomock"
	cache "sigs.k8s.io/controller-runtime/pkg/cache"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// HasPathFrom mocks base method.
func (m *MockInterface) HasPathFrom(fromType graph.VertexType, fromNamespace, fromName string, toType graph.VertexType, toNamespace, toName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPathFrom", fromType, fromNamespace, fromName, toType, toNamespace, toName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPathFrom indicates an expected call of HasPathFrom.
func (mr *MockInterfaceMockRecorder) HasPathFrom(fromType, fromNamespace, fromName, toType, toNamespace, toName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPathFrom", reflect.TypeOf((*MockInterface)(nil).HasPathFrom), fromType, fromNamespace, fromName, toType, toNamespace, toName)
}

// HasVertex mocks base method.
func (m *MockInterface) HasVertex(vertexType graph.VertexType, vertexNamespace, vertexName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVertex", vertexType, vertexNamespace, vertexName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasVertex indicates an expected call of HasVertex.
func (mr *MockInterfaceMockRecorder) HasVertex(vertexType, vertexNamespace, vertexName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVertex", reflect.TypeOf((*MockInterface)(nil).HasVertex), vertexType, vertexNamespace, vertexName)
}

// Setup mocks base method.
func (m *MockInterface) Setup(ctx context.Context, c cache.Cache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockInterfaceMockRecorder) Setup(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockInterface)(nil).Setup), ctx, c)
}
