// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/controllerutils/reconciler (interfaces: RequeueReconciler)
//
// Generated by this command:
//
//	mockgen -package=mock -destination=mocks.go github.com/gardener/gardener/pkg/controllerutils/reconciler RequeueReconciler
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockRequeueReconciler is a mock of RequeueReconciler interface.
type MockRequeueReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRequeueReconcilerMockRecorder
	isgomock struct{}
}

// MockRequeueReconcilerMockRecorder is the mock recorder for MockRequeueReconciler.
type MockRequeueReconcilerMockRecorder struct {
	mock *MockRequeueReconciler
}

// NewMockRequeueReconciler creates a new mock instance.
func NewMockRequeueReconciler(ctrl *gomock.Controller) *MockRequeueReconciler {
	mock := &MockRequeueReconciler{ctrl: ctrl}
	mock.recorder = &MockRequeueReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequeueReconciler) EXPECT() *MockRequeueReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockRequeueReconciler) Reconcile(ctx context.Context, request reconcile.Request) (bool, reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(reconcile.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockRequeueReconcilerMockRecorder) Reconcile(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockRequeueReconciler)(nil).Reconcile), ctx, request)
}
