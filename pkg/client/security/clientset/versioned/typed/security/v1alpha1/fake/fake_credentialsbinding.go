// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/gardener/gardener/pkg/apis/security/v1alpha1"
	securityv1alpha1 "github.com/gardener/gardener/pkg/client/security/clientset/versioned/typed/security/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeCredentialsBindings implements CredentialsBindingInterface
type fakeCredentialsBindings struct {
	*gentype.FakeClientWithList[*v1alpha1.CredentialsBinding, *v1alpha1.CredentialsBindingList]
	Fake *FakeSecurityV1alpha1
}

func newFakeCredentialsBindings(fake *FakeSecurityV1alpha1, namespace string) securityv1alpha1.CredentialsBindingInterface {
	return &fakeCredentialsBindings{
		gentype.NewFakeClientWithList[*v1alpha1.CredentialsBinding, *v1alpha1.CredentialsBindingList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("credentialsbindings"),
			v1alpha1.SchemeGroupVersion.WithKind("CredentialsBinding"),
			func() *v1alpha1.CredentialsBinding { return &v1alpha1.CredentialsBinding{} },
			func() *v1alpha1.CredentialsBindingList { return &v1alpha1.CredentialsBindingList{} },
			func(dst, src *v1alpha1.CredentialsBindingList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.CredentialsBindingList) []*v1alpha1.CredentialsBinding {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.CredentialsBindingList, items []*v1alpha1.CredentialsBinding) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
