// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1alpha1 "github.com/gardener/gardener/pkg/apis/security/v1alpha1"
	securityv1alpha1 "github.com/gardener/gardener/pkg/client/security/clientset/versioned/typed/security/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeWorkloadIdentities implements WorkloadIdentityInterface
type fakeWorkloadIdentities struct {
	*gentype.FakeClientWithList[*v1alpha1.WorkloadIdentity, *v1alpha1.WorkloadIdentityList]
	Fake *FakeSecurityV1alpha1
}

func newFakeWorkloadIdentities(fake *FakeSecurityV1alpha1, namespace string) securityv1alpha1.WorkloadIdentityInterface {
	return &fakeWorkloadIdentities{
		gentype.NewFakeClientWithList[*v1alpha1.WorkloadIdentity, *v1alpha1.WorkloadIdentityList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("workloadidentities"),
			v1alpha1.SchemeGroupVersion.WithKind("WorkloadIdentity"),
			func() *v1alpha1.WorkloadIdentity { return &v1alpha1.WorkloadIdentity{} },
			func() *v1alpha1.WorkloadIdentityList { return &v1alpha1.WorkloadIdentityList{} },
			func(dst, src *v1alpha1.WorkloadIdentityList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.WorkloadIdentityList) []*v1alpha1.WorkloadIdentity {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.WorkloadIdentityList, items []*v1alpha1.WorkloadIdentity) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// CreateToken takes the representation of a tokenRequest and creates it.  Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *fakeWorkloadIdentities) CreateToken(ctx context.Context, workloadIdentityName string, tokenRequest *v1alpha1.TokenRequest, opts v1.CreateOptions) (result *v1alpha1.TokenRequest, err error) {
	emptyResult := &v1alpha1.TokenRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), workloadIdentityName, "token", c.Namespace(), tokenRequest, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.TokenRequest), err
}
