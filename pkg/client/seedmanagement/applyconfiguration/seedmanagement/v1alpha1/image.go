// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ImageApplyConfiguration represents an declarative configuration of the Image type for use
// with apply.
type ImageApplyConfiguration struct {
	Repository *string        `json:"repository,omitempty"`
	Tag        *string        `json:"tag,omitempty"`
	PullPolicy *v1.PullPolicy `json:"pullPolicy,omitempty"`
}

// ImageApplyConfiguration constructs an declarative configuration of the Image type for use with
// apply.
func Image() *ImageApplyConfiguration {
	return &ImageApplyConfiguration{}
}

// WithRepository sets the Repository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Repository field is set to the value of the last call.
func (b *ImageApplyConfiguration) WithRepository(value string) *ImageApplyConfiguration {
	b.Repository = &value
	return b
}

// WithTag sets the Tag field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tag field is set to the value of the last call.
func (b *ImageApplyConfiguration) WithTag(value string) *ImageApplyConfiguration {
	b.Tag = &value
	return b
}

// WithPullPolicy sets the PullPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PullPolicy field is set to the value of the last call.
func (b *ImageApplyConfiguration) WithPullPolicy(value v1.PullPolicy) *ImageApplyConfiguration {
	b.PullPolicy = &value
	return b
}
