// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/gardener/gardener/pkg/apis/settings/v1alpha1"
	settingsv1alpha1 "github.com/gardener/gardener/pkg/client/settings/clientset/versioned/typed/settings/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterOpenIDConnectPresets implements ClusterOpenIDConnectPresetInterface
type fakeClusterOpenIDConnectPresets struct {
	*gentype.FakeClientWithList[*v1alpha1.ClusterOpenIDConnectPreset, *v1alpha1.ClusterOpenIDConnectPresetList]
	Fake *FakeSettingsV1alpha1
}

func newFakeClusterOpenIDConnectPresets(fake *FakeSettingsV1alpha1) settingsv1alpha1.ClusterOpenIDConnectPresetInterface {
	return &fakeClusterOpenIDConnectPresets{
		gentype.NewFakeClientWithList[*v1alpha1.ClusterOpenIDConnectPreset, *v1alpha1.ClusterOpenIDConnectPresetList](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("clusteropenidconnectpresets"),
			v1alpha1.SchemeGroupVersion.WithKind("ClusterOpenIDConnectPreset"),
			func() *v1alpha1.ClusterOpenIDConnectPreset { return &v1alpha1.ClusterOpenIDConnectPreset{} },
			func() *v1alpha1.ClusterOpenIDConnectPresetList { return &v1alpha1.ClusterOpenIDConnectPresetList{} },
			func(dst, src *v1alpha1.ClusterOpenIDConnectPresetList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ClusterOpenIDConnectPresetList) []*v1alpha1.ClusterOpenIDConnectPreset {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ClusterOpenIDConnectPresetList, items []*v1alpha1.ClusterOpenIDConnectPreset) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
