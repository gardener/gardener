// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// KubeAPIServerOpenIDConnectApplyConfiguration represents an declarative configuration of the KubeAPIServerOpenIDConnect type for use
// with apply.
type KubeAPIServerOpenIDConnectApplyConfiguration struct {
	CABundle       *string           `json:"caBundle,omitempty"`
	ClientID       *string           `json:"clientID,omitempty"`
	GroupsClaim    *string           `json:"groupsClaim,omitempty"`
	GroupsPrefix   *string           `json:"groupsPrefix,omitempty"`
	IssuerURL      *string           `json:"issuerURL,omitempty"`
	RequiredClaims map[string]string `json:"requiredClaims,omitempty"`
	SigningAlgs    []string          `json:"signingAlgs,omitempty"`
	UsernameClaim  *string           `json:"usernameClaim,omitempty"`
	UsernamePrefix *string           `json:"usernamePrefix,omitempty"`
}

// KubeAPIServerOpenIDConnectApplyConfiguration constructs an declarative configuration of the KubeAPIServerOpenIDConnect type for use with
// apply.
func KubeAPIServerOpenIDConnect() *KubeAPIServerOpenIDConnectApplyConfiguration {
	return &KubeAPIServerOpenIDConnectApplyConfiguration{}
}

// WithCABundle sets the CABundle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CABundle field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithCABundle(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.CABundle = &value
	return b
}

// WithClientID sets the ClientID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientID field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithClientID(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.ClientID = &value
	return b
}

// WithGroupsClaim sets the GroupsClaim field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupsClaim field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithGroupsClaim(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.GroupsClaim = &value
	return b
}

// WithGroupsPrefix sets the GroupsPrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupsPrefix field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithGroupsPrefix(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.GroupsPrefix = &value
	return b
}

// WithIssuerURL sets the IssuerURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssuerURL field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithIssuerURL(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.IssuerURL = &value
	return b
}

// WithRequiredClaims puts the entries into the RequiredClaims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the RequiredClaims field,
// overwriting an existing map entries in RequiredClaims field with the same key.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithRequiredClaims(entries map[string]string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	if b.RequiredClaims == nil && len(entries) > 0 {
		b.RequiredClaims = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.RequiredClaims[k] = v
	}
	return b
}

// WithSigningAlgs adds the given value to the SigningAlgs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SigningAlgs field.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithSigningAlgs(values ...string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	for i := range values {
		b.SigningAlgs = append(b.SigningAlgs, values[i])
	}
	return b
}

// WithUsernameClaim sets the UsernameClaim field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UsernameClaim field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithUsernameClaim(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.UsernameClaim = &value
	return b
}

// WithUsernamePrefix sets the UsernamePrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UsernamePrefix field is set to the value of the last call.
func (b *KubeAPIServerOpenIDConnectApplyConfiguration) WithUsernamePrefix(value string) *KubeAPIServerOpenIDConnectApplyConfiguration {
	b.UsernamePrefix = &value
	return b
}
