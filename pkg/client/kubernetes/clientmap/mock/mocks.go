// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/client/kubernetes/clientmap (interfaces: ClientMap,ClientSetFactory)
//
// Generated by this command:
//
//	mockgen -package mock -destination=mocks.go github.com/gardener/gardener/pkg/client/kubernetes/clientmap ClientMap,ClientSetFactory
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kubernetes "github.com/gardener/gardener/pkg/client/kubernetes"
	clientmap "github.com/gardener/gardener/pkg/client/kubernetes/clientmap"
	gomock "go.uber.org/mock/gomock"
)

// MockClientMap is a mock of ClientMap interface.
type MockClientMap struct {
	ctrl     *gomock.Controller
	recorder *MockClientMapMockRecorder
	isgomock struct{}
}

// MockClientMapMockRecorder is the mock recorder for MockClientMap.
type MockClientMapMockRecorder struct {
	mock *MockClientMap
}

// NewMockClientMap creates a new mock instance.
func NewMockClientMap(ctrl *gomock.Controller) *MockClientMap {
	mock := &MockClientMap{ctrl: ctrl}
	mock.recorder = &MockClientMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientMap) EXPECT() *MockClientMapMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientMap) GetClient(ctx context.Context, key clientmap.ClientSetKey) (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, key)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientMapMockRecorder) GetClient(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientMap)(nil).GetClient), ctx, key)
}

// InvalidateClient mocks base method.
func (m *MockClientMap) InvalidateClient(key clientmap.ClientSetKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateClient", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateClient indicates an expected call of InvalidateClient.
func (mr *MockClientMapMockRecorder) InvalidateClient(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateClient", reflect.TypeOf((*MockClientMap)(nil).InvalidateClient), key)
}

// Start mocks base method.
func (m *MockClientMap) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClientMapMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientMap)(nil).Start), ctx)
}

// MockClientSetFactory is a mock of ClientSetFactory interface.
type MockClientSetFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientSetFactoryMockRecorder
	isgomock struct{}
}

// MockClientSetFactoryMockRecorder is the mock recorder for MockClientSetFactory.
type MockClientSetFactoryMockRecorder struct {
	mock *MockClientSetFactory
}

// NewMockClientSetFactory creates a new mock instance.
func NewMockClientSetFactory(ctrl *gomock.Controller) *MockClientSetFactory {
	mock := &MockClientSetFactory{ctrl: ctrl}
	mock.recorder = &MockClientSetFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSetFactory) EXPECT() *MockClientSetFactoryMockRecorder {
	return m.recorder
}

// CalculateClientSetHash mocks base method.
func (m *MockClientSetFactory) CalculateClientSetHash(ctx context.Context, key clientmap.ClientSetKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateClientSetHash", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateClientSetHash indicates an expected call of CalculateClientSetHash.
func (mr *MockClientSetFactoryMockRecorder) CalculateClientSetHash(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateClientSetHash", reflect.TypeOf((*MockClientSetFactory)(nil).CalculateClientSetHash), ctx, key)
}

// NewClientSet mocks base method.
func (m *MockClientSetFactory) NewClientSet(ctx context.Context, key clientmap.ClientSetKey) (kubernetes.Interface, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientSet", ctx, key)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewClientSet indicates an expected call of NewClientSet.
func (mr *MockClientSetFactoryMockRecorder) NewClientSet(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientSet", reflect.TypeOf((*MockClientSetFactory)(nil).NewClientSet), ctx, key)
}
