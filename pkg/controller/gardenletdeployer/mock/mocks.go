// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/controller/gardenletdeployer (interfaces: Interface,ValuesHelper)
//
// Generated by this command:
//
//	mockgen -destination=mocks.go -package=mock github.com/gardener/gardener/pkg/controller/gardenletdeployer Interface,ValuesHelper
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
	v1alpha1 "github.com/gardener/gardener/pkg/apis/seedmanagement/v1alpha1"
	v1alpha10 "github.com/gardener/gardener/pkg/gardenlet/apis/config/v1alpha1"
	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInterface) Delete(arg0 context.Context, arg1 logr.Logger, arg2 client.Object, arg3 []v1beta1.Condition, arg4 *v1alpha1.GardenletDeployment, arg5 *runtime.RawExtension, arg6 v1alpha1.Bootstrap, arg7 bool) ([]v1beta1.Condition, bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].([]v1beta1.Condition)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Delete indicates an expected call of Delete.
func (mr *MockInterfaceMockRecorder) Delete(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Reconcile mocks base method.
func (m *MockInterface) Reconcile(arg0 context.Context, arg1 logr.Logger, arg2 client.Object, arg3 []v1beta1.Condition, arg4 *v1alpha1.GardenletDeployment, arg5 *runtime.RawExtension, arg6 v1alpha1.Bootstrap, arg7 bool) ([]v1beta1.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].([]v1beta1.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockInterfaceMockRecorder) Reconcile(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockInterface)(nil).Reconcile), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// MockValuesHelper is a mock of ValuesHelper interface.
type MockValuesHelper struct {
	ctrl     *gomock.Controller
	recorder *MockValuesHelperMockRecorder
	isgomock struct{}
}

// MockValuesHelperMockRecorder is the mock recorder for MockValuesHelper.
type MockValuesHelperMockRecorder struct {
	mock *MockValuesHelper
}

// NewMockValuesHelper creates a new mock instance.
func NewMockValuesHelper(ctrl *gomock.Controller) *MockValuesHelper {
	mock := &MockValuesHelper{ctrl: ctrl}
	mock.recorder = &MockValuesHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValuesHelper) EXPECT() *MockValuesHelperMockRecorder {
	return m.recorder
}

// GetGardenletChartValues mocks base method.
func (m *MockValuesHelper) GetGardenletChartValues(arg0 *v1alpha1.GardenletDeployment, arg1 *v1alpha10.GardenletConfiguration, arg2 string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGardenletChartValues", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGardenletChartValues indicates an expected call of GetGardenletChartValues.
func (mr *MockValuesHelperMockRecorder) GetGardenletChartValues(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGardenletChartValues", reflect.TypeOf((*MockValuesHelper)(nil).GetGardenletChartValues), arg0, arg1, arg2)
}

// MergeGardenletConfiguration mocks base method.
func (m *MockValuesHelper) MergeGardenletConfiguration(config *v1alpha10.GardenletConfiguration) (*v1alpha10.GardenletConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeGardenletConfiguration", config)
	ret0, _ := ret[0].(*v1alpha10.GardenletConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeGardenletConfiguration indicates an expected call of MergeGardenletConfiguration.
func (mr *MockValuesHelperMockRecorder) MergeGardenletConfiguration(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeGardenletConfiguration", reflect.TypeOf((*MockValuesHelper)(nil).MergeGardenletConfiguration), config)
}

// MergeGardenletDeployment mocks base method.
func (m *MockValuesHelper) MergeGardenletDeployment(arg0 *v1alpha1.GardenletDeployment) (*v1alpha1.GardenletDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeGardenletDeployment", arg0)
	ret0, _ := ret[0].(*v1alpha1.GardenletDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeGardenletDeployment indicates an expected call of MergeGardenletDeployment.
func (mr *MockValuesHelperMockRecorder) MergeGardenletDeployment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeGardenletDeployment", reflect.TypeOf((*MockValuesHelper)(nil).MergeGardenletDeployment), arg0)
}
