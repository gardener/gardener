//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&Gardenlet{}, func(obj interface{}) { SetObjectDefaults_Gardenlet(obj.(*Gardenlet)) })
	scheme.AddTypeDefaultingFunc(&GardenletList{}, func(obj interface{}) { SetObjectDefaults_GardenletList(obj.(*GardenletList)) })
	scheme.AddTypeDefaultingFunc(&ManagedSeed{}, func(obj interface{}) { SetObjectDefaults_ManagedSeed(obj.(*ManagedSeed)) })
	scheme.AddTypeDefaultingFunc(&ManagedSeedList{}, func(obj interface{}) { SetObjectDefaults_ManagedSeedList(obj.(*ManagedSeedList)) })
	scheme.AddTypeDefaultingFunc(&ManagedSeedSet{}, func(obj interface{}) { SetObjectDefaults_ManagedSeedSet(obj.(*ManagedSeedSet)) })
	scheme.AddTypeDefaultingFunc(&ManagedSeedSetList{}, func(obj interface{}) { SetObjectDefaults_ManagedSeedSetList(obj.(*ManagedSeedSetList)) })
	return nil
}

func SetObjectDefaults_Gardenlet(in *Gardenlet) {
	SetDefaults_Gardenlet(in)
	SetDefaults_GardenletDeployment(&in.Spec.Deployment.GardenletDeployment)
	if in.Spec.Deployment.GardenletDeployment.Image != nil {
		SetDefaults_Image(in.Spec.Deployment.GardenletDeployment.Image)
	}
	for i := range in.Spec.Deployment.GardenletDeployment.AdditionalVolumes {
		a := &in.Spec.Deployment.GardenletDeployment.AdditionalVolumes[i]
		if a.VolumeSource.ISCSI != nil {
			if a.VolumeSource.ISCSI.ISCSIInterface == "" {
				a.VolumeSource.ISCSI.ISCSIInterface = "default"
			}
		}
		if a.VolumeSource.RBD != nil {
			if a.VolumeSource.RBD.RBDPool == "" {
				a.VolumeSource.RBD.RBDPool = "rbd"
			}
			if a.VolumeSource.RBD.RadosUser == "" {
				a.VolumeSource.RBD.RadosUser = "admin"
			}
			if a.VolumeSource.RBD.Keyring == "" {
				a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
			}
		}
		if a.VolumeSource.AzureDisk != nil {
			if a.VolumeSource.AzureDisk.CachingMode == nil {
				ptrVar1 := v1.AzureDataDiskCachingMode(v1.AzureDataDiskCachingReadWrite)
				a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.FSType == nil {
				var ptrVar1 string = "ext4"
				a.VolumeSource.AzureDisk.FSType = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.ReadOnly == nil {
				var ptrVar1 bool = false
				a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.Kind == nil {
				ptrVar1 := v1.AzureDataDiskKind(v1.AzureSharedBlobDisk)
				a.VolumeSource.AzureDisk.Kind = &ptrVar1
			}
		}
		if a.VolumeSource.ScaleIO != nil {
			if a.VolumeSource.ScaleIO.StorageMode == "" {
				a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
			}
			if a.VolumeSource.ScaleIO.FSType == "" {
				a.VolumeSource.ScaleIO.FSType = "xfs"
			}
		}
	}
}

func SetObjectDefaults_GardenletList(in *GardenletList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Gardenlet(a)
	}
}

func SetObjectDefaults_ManagedSeed(in *ManagedSeed) {
	SetDefaults_ManagedSeed(in)
	if in.Spec.Gardenlet != nil {
		if in.Spec.Gardenlet.Deployment != nil {
			SetDefaults_GardenletDeployment(in.Spec.Gardenlet.Deployment)
			if in.Spec.Gardenlet.Deployment.Image != nil {
				SetDefaults_Image(in.Spec.Gardenlet.Deployment.Image)
			}
			for i := range in.Spec.Gardenlet.Deployment.AdditionalVolumes {
				a := &in.Spec.Gardenlet.Deployment.AdditionalVolumes[i]
				if a.VolumeSource.ISCSI != nil {
					if a.VolumeSource.ISCSI.ISCSIInterface == "" {
						a.VolumeSource.ISCSI.ISCSIInterface = "default"
					}
				}
				if a.VolumeSource.RBD != nil {
					if a.VolumeSource.RBD.RBDPool == "" {
						a.VolumeSource.RBD.RBDPool = "rbd"
					}
					if a.VolumeSource.RBD.RadosUser == "" {
						a.VolumeSource.RBD.RadosUser = "admin"
					}
					if a.VolumeSource.RBD.Keyring == "" {
						a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
					}
				}
				if a.VolumeSource.AzureDisk != nil {
					if a.VolumeSource.AzureDisk.CachingMode == nil {
						ptrVar1 := v1.AzureDataDiskCachingMode(v1.AzureDataDiskCachingReadWrite)
						a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
					}
					if a.VolumeSource.AzureDisk.FSType == nil {
						var ptrVar1 string = "ext4"
						a.VolumeSource.AzureDisk.FSType = &ptrVar1
					}
					if a.VolumeSource.AzureDisk.ReadOnly == nil {
						var ptrVar1 bool = false
						a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
					}
					if a.VolumeSource.AzureDisk.Kind == nil {
						ptrVar1 := v1.AzureDataDiskKind(v1.AzureSharedBlobDisk)
						a.VolumeSource.AzureDisk.Kind = &ptrVar1
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					if a.VolumeSource.ScaleIO.StorageMode == "" {
						a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
					}
					if a.VolumeSource.ScaleIO.FSType == "" {
						a.VolumeSource.ScaleIO.FSType = "xfs"
					}
				}
			}
		}
	}
}

func SetObjectDefaults_ManagedSeedList(in *ManagedSeedList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_ManagedSeed(a)
	}
}

func SetObjectDefaults_ManagedSeedSet(in *ManagedSeedSet) {
	SetDefaults_ManagedSeedSet(in)
	if in.Spec.Template.Spec.Gardenlet != nil {
		if in.Spec.Template.Spec.Gardenlet.Deployment != nil {
			SetDefaults_GardenletDeployment(in.Spec.Template.Spec.Gardenlet.Deployment)
			if in.Spec.Template.Spec.Gardenlet.Deployment.Image != nil {
				SetDefaults_Image(in.Spec.Template.Spec.Gardenlet.Deployment.Image)
			}
			for i := range in.Spec.Template.Spec.Gardenlet.Deployment.AdditionalVolumes {
				a := &in.Spec.Template.Spec.Gardenlet.Deployment.AdditionalVolumes[i]
				if a.VolumeSource.ISCSI != nil {
					if a.VolumeSource.ISCSI.ISCSIInterface == "" {
						a.VolumeSource.ISCSI.ISCSIInterface = "default"
					}
				}
				if a.VolumeSource.RBD != nil {
					if a.VolumeSource.RBD.RBDPool == "" {
						a.VolumeSource.RBD.RBDPool = "rbd"
					}
					if a.VolumeSource.RBD.RadosUser == "" {
						a.VolumeSource.RBD.RadosUser = "admin"
					}
					if a.VolumeSource.RBD.Keyring == "" {
						a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
					}
				}
				if a.VolumeSource.AzureDisk != nil {
					if a.VolumeSource.AzureDisk.CachingMode == nil {
						ptrVar1 := v1.AzureDataDiskCachingMode(v1.AzureDataDiskCachingReadWrite)
						a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
					}
					if a.VolumeSource.AzureDisk.FSType == nil {
						var ptrVar1 string = "ext4"
						a.VolumeSource.AzureDisk.FSType = &ptrVar1
					}
					if a.VolumeSource.AzureDisk.ReadOnly == nil {
						var ptrVar1 bool = false
						a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
					}
					if a.VolumeSource.AzureDisk.Kind == nil {
						ptrVar1 := v1.AzureDataDiskKind(v1.AzureSharedBlobDisk)
						a.VolumeSource.AzureDisk.Kind = &ptrVar1
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					if a.VolumeSource.ScaleIO.StorageMode == "" {
						a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
					}
					if a.VolumeSource.ScaleIO.FSType == "" {
						a.VolumeSource.ScaleIO.FSType = "xfs"
					}
				}
			}
		}
	}
	if in.Spec.UpdateStrategy != nil {
		SetDefaults_UpdateStrategy(in.Spec.UpdateStrategy)
		if in.Spec.UpdateStrategy.RollingUpdate != nil {
			SetDefaults_RollingUpdateStrategy(in.Spec.UpdateStrategy.RollingUpdate)
		}
	}
}

func SetObjectDefaults_ManagedSeedSetList(in *ManagedSeedSetList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_ManagedSeedSet(a)
	}
}
