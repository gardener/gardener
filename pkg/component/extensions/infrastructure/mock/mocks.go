// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/component/extensions/infrastructure (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -package infrastructure -destination=mocks.go github.com/gardener/gardener/pkg/component/extensions/infrastructure Interface
//

// Package infrastructure is a generated GoMock package.
package infrastructure

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockInterface) Deploy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockInterfaceMockRecorder) Deploy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockInterface)(nil).Deploy), ctx)
}

// Destroy mocks base method.
func (m *MockInterface) Destroy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockInterfaceMockRecorder) Destroy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockInterface)(nil).Destroy), ctx)
}

// EgressCIDRs mocks base method.
func (m *MockInterface) EgressCIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EgressCIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// EgressCIDRs indicates an expected call of EgressCIDRs.
func (mr *MockInterfaceMockRecorder) EgressCIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EgressCIDRs", reflect.TypeOf((*MockInterface)(nil).EgressCIDRs))
}

// Get mocks base method.
func (m *MockInterface) Get(arg0 context.Context) (*v1alpha1.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), arg0)
}

// Migrate mocks base method.
func (m *MockInterface) Migrate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockInterfaceMockRecorder) Migrate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockInterface)(nil).Migrate), ctx)
}

// NodesCIDRs mocks base method.
func (m *MockInterface) NodesCIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodesCIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// NodesCIDRs indicates an expected call of NodesCIDRs.
func (mr *MockInterfaceMockRecorder) NodesCIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesCIDRs", reflect.TypeOf((*MockInterface)(nil).NodesCIDRs))
}

// PodsCIDRs mocks base method.
func (m *MockInterface) PodsCIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsCIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// PodsCIDRs indicates an expected call of PodsCIDRs.
func (mr *MockInterfaceMockRecorder) PodsCIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsCIDRs", reflect.TypeOf((*MockInterface)(nil).PodsCIDRs))
}

// ProviderStatus mocks base method.
func (m *MockInterface) ProviderStatus() *runtime.RawExtension {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderStatus")
	ret0, _ := ret[0].(*runtime.RawExtension)
	return ret0
}

// ProviderStatus indicates an expected call of ProviderStatus.
func (mr *MockInterfaceMockRecorder) ProviderStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderStatus", reflect.TypeOf((*MockInterface)(nil).ProviderStatus))
}

// Restore mocks base method.
func (m *MockInterface) Restore(ctx context.Context, shootState *v1beta1.ShootState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, shootState)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockInterfaceMockRecorder) Restore(ctx, shootState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockInterface)(nil).Restore), ctx, shootState)
}

// ServicesCIDRs mocks base method.
func (m *MockInterface) ServicesCIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesCIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ServicesCIDRs indicates an expected call of ServicesCIDRs.
func (mr *MockInterfaceMockRecorder) ServicesCIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesCIDRs", reflect.TypeOf((*MockInterface)(nil).ServicesCIDRs))
}

// SetSSHPublicKey mocks base method.
func (m *MockInterface) SetSSHPublicKey(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSSHPublicKey", arg0)
}

// SetSSHPublicKey indicates an expected call of SetSSHPublicKey.
func (mr *MockInterfaceMockRecorder) SetSSHPublicKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSSHPublicKey", reflect.TypeOf((*MockInterface)(nil).SetSSHPublicKey), arg0)
}

// Wait mocks base method.
func (m *MockInterface) Wait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockInterfaceMockRecorder) Wait(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockInterface)(nil).Wait), ctx)
}

// WaitCleanup mocks base method.
func (m *MockInterface) WaitCleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitCleanup indicates an expected call of WaitCleanup.
func (mr *MockInterfaceMockRecorder) WaitCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCleanup", reflect.TypeOf((*MockInterface)(nil).WaitCleanup), ctx)
}

// WaitMigrate mocks base method.
func (m *MockInterface) WaitMigrate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitMigrate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitMigrate indicates an expected call of WaitMigrate.
func (mr *MockInterfaceMockRecorder) WaitMigrate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitMigrate", reflect.TypeOf((*MockInterface)(nil).WaitMigrate), ctx)
}
