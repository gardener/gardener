---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }}
spec:
  workloadSelector:
    labels:
{{- range $k, $v := .IngressGatewayLabels }}
      {{ $k }}: {{ $v }}
{{- end }}
  configPatches:
  {{- if .APIServerProxy }}
  - applyTo: FILTER_CHAIN
    match:
      context: ANY
      listener:
        portNumber: 8443
    patch:
      operation: ADD
      value:
        filters:
        - name: envoy.filters.network.tcp_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
            stat_prefix: {{ .TargetClusterProxyProtocol }}
            cluster: {{ .TargetClusterProxyProtocol }}
            access_log:
            - name: envoy.access_loggers.file
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: /dev/stdout
                log_format:
                  text_format_source:
                    # This is the default log format used by Envoy except for the following changes:
                    # DOWNSTREAM_REMOTE_ADDRESS is replaced with DOWNSTREAM_DIRECT_REMOTE_ADDRESS to log the internet-routable client IP
                    inline_string: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% "%UPSTREAM_TRANSPORT_FAILURE_REASON%" %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_DIRECT_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME% apiserver-proxy
        filter_chain_match:
          destination_port: {{ .Port }}
          prefix_ranges:
          - address_prefix: {{ .APIServerClusterIP }}
            prefix_len: {{ .APIServerClusterIPPrefixLen }}
  {{- end }}
  {{- if .IstioTLSTermination }}
  - applyTo: LISTENER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: {{ .TargetClusterProxyProtocol }}
        address:
          pipe:
            path: "@kube-apiservers/{{ .ControlPlaneNamespace }}"
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
              stat_prefix: {{ .TargetClusterProxyProtocol }}
              route_config:
                name: {{ .TargetClusterProxyProtocol }}
                virtual_hosts:
                - name: {{ .TargetClusterProxyProtocol }}
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                      dynamic_metadata:
                      - filter: envoy.filters.http.lua
                        path:
                        - key: {{ .APIServerAuthenticationDynamicMetadataKey }}
                        value:
                          string_match:
                            exact: {{ .ControlPlaneNamespace }}
                    route:
                      cluster: outbound|{{ .Port }}||{{ .MTLSHost }}
                  - match:
                      prefix: "/"
                    route:
                      cluster: outbound|{{ .Port }}||{{ .Host }}
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                  defaultSourceCode:
                    inlineString: |
                      function envoy_on_request(request_handle)
                        -- Drop headers used by kube-apiserver authentication proxy.
                        local remove = {"{{ .APIServerRequestHeaderUserName }}", "{{ .APIServerRequestHeaderGroup }}"}
                        for key, value in pairs(remove) do
                          request_handle:headers():remove(value)
                        end
        
                        local streamInfo = request_handle:streamInfo()
                        local ssl = streamInfo:downstreamSslConnection()
        
                        -- TODO(oliver-goetz) switch to ssl:parsedSubjectPeerCertificate() once it is available.
                        local cn = ssl:subjectPeerCertificate()
                        if cn ~= "" then
                          -- Set the authenticated shoot as dynamic metadata.
                          streamInfo:dynamicMetadata():set("envoy.filters.http.lua", "{{ .APIServerAuthenticationDynamicMetadataKey }}", "{{ .ControlPlaneNamespace }}")
        
                          -- Add request headers for kube-apiserver authentication.
                          local remoteUserHeaderAdded = false
                          -- Iterate over all substrings in cn that are separated by commas.
                          for pair in string.gmatch(cn, "([^,]+)") do
                              -- For each substring extract key and value that are separated by '='.
                              local key, value = pair:match("([^=]+)=([^=]+)")
                              -- Istio is an authenticating proxy in this case, so we must set the defined headers accordingly.
                              -- https://kubernetes.io/docs/reference/access-authn-authz/authentication/#authenticating-proxy
                              -- CN of the client certificate defines the username, O defines groups.
                              -- see https://kubernetes.io/docs/setup/best-practices/certificates/#configure-certificates-for-user-accounts
                              if key == "CN" then
                                request_handle:headers():add("{{ .APIServerRequestHeaderUserName }}", value)
                                remoteUserHeaderAdded = true
                              elseif key == "O" then
                                request_handle:headers():add("{{ .APIServerRequestHeaderGroup }}", value)
                              end
                          end
        
                          -- Kill request if remote user header was not added.
                          if not remoteUserHeaderAdded then
                            request_handle:respond({[":status"] = "400"}, "Invalid certificate subject")
                          end
                        end
        
                        -- Route timeouts to upstream have to be disabled. Otherwise, watches would be terminated after 15 seconds.
                        -- See https://www.envoyproxy.io/docs/envoy/latest/faq/configuration/timeouts#route-timeouts
                        request_handle:headers():add("x-envoy-upstream-rq-timeout-ms", "0")
                        request_handle:headers():add("x-envoy-upstream-rq-per-try-timeout-ms", "0")
                      end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                alpn_protocols:
                  - h2
                  - http/1.1
                tls_certificate_sds_secret_configs:
                  - name: kubernetes://{{ .IstioTLSSecret }}
                    sds_config:
                      ads: {}
                      resource_api_version: V3
                combined_validation_context:
                  default_validation_context: {}
                  validation_context_sds_secret_config:
                    name: kubernetes://{{ .IstioTLSSecret }}-cacert
                    sds_config:
                      ads: {}
                      resource_api_version: V3
              require_client_certificate: false
  - applyTo: CLUSTER
    match:
      context: ANY
    patch:
      operation: ADD
      value:
        name: {{ .TargetClusterProxyProtocol }}
        type: STATIC
        connect_timeout: 1s
        load_assignment:
          cluster_name: {{ .TargetClusterProxyProtocol }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  pipe:
                    path: "@kube-apiservers/{{ .ControlPlaneNamespace }}"
  {{- end }}
