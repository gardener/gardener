apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }}
spec:
  workloadSelector:
    labels:
{{- range $k, $v := .IngressGatewayLabels }}
      {{ $k }}: {{ $v }}
{{- end }}
  configPatches:
  - applyTo: LISTENER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: {{ .TargetClusterAPIServerProxy }}
        address:
          pipe:
            path: "@kube-apiservers/{{ .ControlPlaneNamespace }}"
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
              stat_prefix: {{ .TargetClusterAPIServerProxy }}
              route_config:
                name: {{ .TargetClusterAPIServerProxy }}
                virtual_hosts:
                - name: {{ .TargetClusterAPIServerProxy }}
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                      dynamic_metadata:
                      - filter: envoy.filters.http.lua
                        path:
                        - key: {{ .APIServerAuthenticationDynamicMetadataKey }}
                        value:
                          string_match:
                            exact: {{ .ControlPlaneNamespace }}
                    route:
                      cluster: outbound|{{ .Port }}||{{ .MutualTLSHost }}
                  - match:
                      prefix: "/"
                      headers:
                      - name: Connection
                        string_match:
                          exact: Upgrade
                      - name: Upgrade
                        present_match: true
                    route:
                      cluster: outbound|{{ .Port }}||{{ .ConnectionUpgradeHost }}
                      upgrade_configs:
                      - upgrade_type: spdy/3.1
                      - upgrade_type: websocket
                  - match:
                      prefix: "/"
                    route:
                      cluster: outbound|{{ .Port }}||{{ .Host }}
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                  defaultSourceCode:
                    inlineString: |
                      function envoy_on_request(request_handle)
                        -- Drop headers used by kube-apiserver authentication proxy.
                        local remove = {"{{ .APIServerRequestHeaderUserName }}", "{{ .APIServerRequestHeaderGroup }}"}
                        for key, value in pairs(remove) do
                          request_handle:headers():remove(value)
                        end

                        local streamInfo = request_handle:streamInfo()
                        local ssl = streamInfo:downstreamSslConnection()

                        -- Parse client certificate subject.
                        local parsedSubject = ssl:parsedSubjectPeerCertificate()
                        if parsedSubject then
                          -- Set the authenticated shoot as dynamic metadata.
                          streamInfo:dynamicMetadata():set("envoy.filters.http.lua", "{{ .APIServerAuthenticationDynamicMetadataKey }}", "{{ .ControlPlaneNamespace }}")

                          local cn = parsedSubject:commonName()
                          -- Kill request if CN is empty.
                          if cn == "" then
                            request_handle:respond({[":status"] = "400"}, "Invalid certificate subject")
                          end

                          -- Add request headers for kube-apiserver authentication.
                          -- Istio is an authenticating proxy in this case, so we must set the defined headers accordingly.
                          -- https://kubernetes.io/docs/reference/access-authn-authz/authentication/#authenticating-proxy
                          -- CN of the client certificate defines the username, O defines groups.
                          -- see https://kubernetes.io/docs/setup/best-practices/certificates/#configure-certificates-for-user-accounts
                          request_handle:headers():add("{{ .APIServerRequestHeaderUserName }}", cn)

                          local os = parsedSubject:organizationName()
                          for _, o in ipairs(os) do
                            if o ~= "" then
                              request_handle:headers():add("{{ .APIServerRequestHeaderGroup }}", o)
                            end
                          end
                        end

                        -- Route timeouts to upstream have to be disabled. Otherwise, watches would be terminated after 15 seconds.
                        -- See https://www.envoyproxy.io/docs/envoy/latest/faq/configuration/timeouts#route-timeouts
                        request_handle:headers():add("x-envoy-upstream-rq-timeout-ms", "0")
                        request_handle:headers():add("x-envoy-upstream-rq-per-try-timeout-ms", "0")
                      end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                alpn_protocols:
                  - h2
                  - http/1.1
                tls_certificate_sds_secret_configs:
                  - name: kubernetes://{{ .IstioTLSSecret }}
                    sds_config:
                      ads: {}
                      resource_api_version: V3
                combined_validation_context:
                  default_validation_context: {}
                  validation_context_sds_secret_config:
                    name: kubernetes://{{ .IstioTLSSecret }}-cacert
                    sds_config:
                      ads: {}
                      resource_api_version: V3
              require_client_certificate: false
  - applyTo: CLUSTER
    match:
      context: ANY
    patch:
      operation: ADD
      value:
        name: {{ .TargetClusterAPIServerProxy }}
        type: STATIC
        connect_timeout: 1s
        load_assignment:
          cluster_name: {{ .TargetClusterAPIServerProxy }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  pipe:
                    path: "@kube-apiservers/{{ .ControlPlaneNamespace }}"
