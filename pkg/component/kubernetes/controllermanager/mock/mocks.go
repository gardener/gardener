// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/component/kubernetes/controllermanager (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -package mock -destination=mocks.go github.com/gardener/gardener/pkg/component/kubernetes/controllermanager Interface
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockInterface) Deploy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockInterfaceMockRecorder) Deploy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockInterface)(nil).Deploy), ctx)
}

// Destroy mocks base method.
func (m *MockInterface) Destroy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockInterfaceMockRecorder) Destroy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockInterface)(nil).Destroy), ctx)
}

// SetPodNetworks mocks base method.
func (m *MockInterface) SetPodNetworks(arg0 []net.IPNet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPodNetworks", arg0)
}

// SetPodNetworks indicates an expected call of SetPodNetworks.
func (mr *MockInterfaceMockRecorder) SetPodNetworks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPodNetworks", reflect.TypeOf((*MockInterface)(nil).SetPodNetworks), arg0)
}

// SetReplicaCount mocks base method.
func (m *MockInterface) SetReplicaCount(replicas int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicaCount", replicas)
}

// SetReplicaCount indicates an expected call of SetReplicaCount.
func (mr *MockInterfaceMockRecorder) SetReplicaCount(replicas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicaCount", reflect.TypeOf((*MockInterface)(nil).SetReplicaCount), replicas)
}

// SetRuntimeConfig mocks base method.
func (m *MockInterface) SetRuntimeConfig(runtimeConfig map[string]bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRuntimeConfig", runtimeConfig)
}

// SetRuntimeConfig indicates an expected call of SetRuntimeConfig.
func (mr *MockInterfaceMockRecorder) SetRuntimeConfig(runtimeConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRuntimeConfig", reflect.TypeOf((*MockInterface)(nil).SetRuntimeConfig), runtimeConfig)
}

// SetServiceNetworks mocks base method.
func (m *MockInterface) SetServiceNetworks(arg0 []net.IPNet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServiceNetworks", arg0)
}

// SetServiceNetworks indicates an expected call of SetServiceNetworks.
func (mr *MockInterfaceMockRecorder) SetServiceNetworks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNetworks", reflect.TypeOf((*MockInterface)(nil).SetServiceNetworks), arg0)
}

// SetShootClient mocks base method.
func (m *MockInterface) SetShootClient(c client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShootClient", c)
}

// SetShootClient indicates an expected call of SetShootClient.
func (mr *MockInterfaceMockRecorder) SetShootClient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShootClient", reflect.TypeOf((*MockInterface)(nil).SetShootClient), c)
}

// Wait mocks base method.
func (m *MockInterface) Wait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockInterfaceMockRecorder) Wait(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockInterface)(nil).Wait), ctx)
}

// WaitCleanup mocks base method.
func (m *MockInterface) WaitCleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitCleanup indicates an expected call of WaitCleanup.
func (mr *MockInterfaceMockRecorder) WaitCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCleanup", reflect.TypeOf((*MockInterface)(nil).WaitCleanup), ctx)
}

// WaitForControllerToBeActive mocks base method.
func (m *MockInterface) WaitForControllerToBeActive(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForControllerToBeActive", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForControllerToBeActive indicates an expected call of WaitForControllerToBeActive.
func (mr *MockInterfaceMockRecorder) WaitForControllerToBeActive(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForControllerToBeActive", reflect.TypeOf((*MockInterface)(nil).WaitForControllerToBeActive), ctx)
}
