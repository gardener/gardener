// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/core/v1 (interfaces: CoreV1Interface,PodInterface,NodeInterface,NamespaceInterface,SecretInterface)
//
// Generated by this command:
//
//	mockgen -package v1 -destination=mocks.go k8s.io/client-go/kubernetes/typed/core/v1 CoreV1Interface,PodInterface,NodeInterface,NamespaceInterface,SecretInterface
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/policy/v1"
	v1beta1 "k8s.io/api/policy/v1beta1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v12 "k8s.io/client-go/applyconfigurations/core/v1"
	v13 "k8s.io/client-go/kubernetes/typed/core/v1"
	rest "k8s.io/client-go/rest"
)

// MockCoreV1Interface is a mock of CoreV1Interface interface.
type MockCoreV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockCoreV1InterfaceMockRecorder
	isgomock struct{}
}

// MockCoreV1InterfaceMockRecorder is the mock recorder for MockCoreV1Interface.
type MockCoreV1InterfaceMockRecorder struct {
	mock *MockCoreV1Interface
}

// NewMockCoreV1Interface creates a new mock instance.
func NewMockCoreV1Interface(ctrl *gomock.Controller) *MockCoreV1Interface {
	mock := &MockCoreV1Interface{ctrl: ctrl}
	mock.recorder = &MockCoreV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreV1Interface) EXPECT() *MockCoreV1InterfaceMockRecorder {
	return m.recorder
}

// ComponentStatuses mocks base method.
func (m *MockCoreV1Interface) ComponentStatuses() v13.ComponentStatusInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentStatuses")
	ret0, _ := ret[0].(v13.ComponentStatusInterface)
	return ret0
}

// ComponentStatuses indicates an expected call of ComponentStatuses.
func (mr *MockCoreV1InterfaceMockRecorder) ComponentStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentStatuses", reflect.TypeOf((*MockCoreV1Interface)(nil).ComponentStatuses))
}

// ConfigMaps mocks base method.
func (m *MockCoreV1Interface) ConfigMaps(namespace string) v13.ConfigMapInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps", namespace)
	ret0, _ := ret[0].(v13.ConfigMapInterface)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps.
func (mr *MockCoreV1InterfaceMockRecorder) ConfigMaps(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockCoreV1Interface)(nil).ConfigMaps), namespace)
}

// Endpoints mocks base method.
func (m *MockCoreV1Interface) Endpoints(namespace string) v13.EndpointsInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", namespace)
	ret0, _ := ret[0].(v13.EndpointsInterface)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockCoreV1InterfaceMockRecorder) Endpoints(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockCoreV1Interface)(nil).Endpoints), namespace)
}

// Events mocks base method.
func (m *MockCoreV1Interface) Events(namespace string) v13.EventInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", namespace)
	ret0, _ := ret[0].(v13.EventInterface)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockCoreV1InterfaceMockRecorder) Events(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockCoreV1Interface)(nil).Events), namespace)
}

// LimitRanges mocks base method.
func (m *MockCoreV1Interface) LimitRanges(namespace string) v13.LimitRangeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitRanges", namespace)
	ret0, _ := ret[0].(v13.LimitRangeInterface)
	return ret0
}

// LimitRanges indicates an expected call of LimitRanges.
func (mr *MockCoreV1InterfaceMockRecorder) LimitRanges(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitRanges", reflect.TypeOf((*MockCoreV1Interface)(nil).LimitRanges), namespace)
}

// Namespaces mocks base method.
func (m *MockCoreV1Interface) Namespaces() v13.NamespaceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].(v13.NamespaceInterface)
	return ret0
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockCoreV1InterfaceMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockCoreV1Interface)(nil).Namespaces))
}

// Nodes mocks base method.
func (m *MockCoreV1Interface) Nodes() v13.NodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(v13.NodeInterface)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockCoreV1InterfaceMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockCoreV1Interface)(nil).Nodes))
}

// PersistentVolumeClaims mocks base method.
func (m *MockCoreV1Interface) PersistentVolumeClaims(namespace string) v13.PersistentVolumeClaimInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeClaims", namespace)
	ret0, _ := ret[0].(v13.PersistentVolumeClaimInterface)
	return ret0
}

// PersistentVolumeClaims indicates an expected call of PersistentVolumeClaims.
func (mr *MockCoreV1InterfaceMockRecorder) PersistentVolumeClaims(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeClaims", reflect.TypeOf((*MockCoreV1Interface)(nil).PersistentVolumeClaims), namespace)
}

// PersistentVolumes mocks base method.
func (m *MockCoreV1Interface) PersistentVolumes() v13.PersistentVolumeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumes")
	ret0, _ := ret[0].(v13.PersistentVolumeInterface)
	return ret0
}

// PersistentVolumes indicates an expected call of PersistentVolumes.
func (mr *MockCoreV1InterfaceMockRecorder) PersistentVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumes", reflect.TypeOf((*MockCoreV1Interface)(nil).PersistentVolumes))
}

// PodTemplates mocks base method.
func (m *MockCoreV1Interface) PodTemplates(namespace string) v13.PodTemplateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodTemplates", namespace)
	ret0, _ := ret[0].(v13.PodTemplateInterface)
	return ret0
}

// PodTemplates indicates an expected call of PodTemplates.
func (mr *MockCoreV1InterfaceMockRecorder) PodTemplates(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodTemplates", reflect.TypeOf((*MockCoreV1Interface)(nil).PodTemplates), namespace)
}

// Pods mocks base method.
func (m *MockCoreV1Interface) Pods(namespace string) v13.PodInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", namespace)
	ret0, _ := ret[0].(v13.PodInterface)
	return ret0
}

// Pods indicates an expected call of Pods.
func (mr *MockCoreV1InterfaceMockRecorder) Pods(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockCoreV1Interface)(nil).Pods), namespace)
}

// RESTClient mocks base method.
func (m *MockCoreV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockCoreV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockCoreV1Interface)(nil).RESTClient))
}

// ReplicationControllers mocks base method.
func (m *MockCoreV1Interface) ReplicationControllers(namespace string) v13.ReplicationControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationControllers", namespace)
	ret0, _ := ret[0].(v13.ReplicationControllerInterface)
	return ret0
}

// ReplicationControllers indicates an expected call of ReplicationControllers.
func (mr *MockCoreV1InterfaceMockRecorder) ReplicationControllers(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationControllers", reflect.TypeOf((*MockCoreV1Interface)(nil).ReplicationControllers), namespace)
}

// ResourceQuotas mocks base method.
func (m *MockCoreV1Interface) ResourceQuotas(namespace string) v13.ResourceQuotaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceQuotas", namespace)
	ret0, _ := ret[0].(v13.ResourceQuotaInterface)
	return ret0
}

// ResourceQuotas indicates an expected call of ResourceQuotas.
func (mr *MockCoreV1InterfaceMockRecorder) ResourceQuotas(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceQuotas", reflect.TypeOf((*MockCoreV1Interface)(nil).ResourceQuotas), namespace)
}

// Secrets mocks base method.
func (m *MockCoreV1Interface) Secrets(namespace string) v13.SecretInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", namespace)
	ret0, _ := ret[0].(v13.SecretInterface)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockCoreV1InterfaceMockRecorder) Secrets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockCoreV1Interface)(nil).Secrets), namespace)
}

// ServiceAccounts mocks base method.
func (m *MockCoreV1Interface) ServiceAccounts(namespace string) v13.ServiceAccountInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", namespace)
	ret0, _ := ret[0].(v13.ServiceAccountInterface)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockCoreV1InterfaceMockRecorder) ServiceAccounts(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockCoreV1Interface)(nil).ServiceAccounts), namespace)
}

// Services mocks base method.
func (m *MockCoreV1Interface) Services(namespace string) v13.ServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", namespace)
	ret0, _ := ret[0].(v13.ServiceInterface)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockCoreV1InterfaceMockRecorder) Services(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockCoreV1Interface)(nil).Services), namespace)
}

// MockPodInterface is a mock of PodInterface interface.
type MockPodInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPodInterfaceMockRecorder
	isgomock struct{}
}

// MockPodInterfaceMockRecorder is the mock recorder for MockPodInterface.
type MockPodInterfaceMockRecorder struct {
	mock *MockPodInterface
}

// NewMockPodInterface creates a new mock instance.
func NewMockPodInterface(ctrl *gomock.Controller) *MockPodInterface {
	mock := &MockPodInterface{ctrl: ctrl}
	mock.recorder = &MockPodInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodInterface) EXPECT() *MockPodInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockPodInterface) Apply(ctx context.Context, pod *v12.PodApplyConfiguration, opts v11.ApplyOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockPodInterfaceMockRecorder) Apply(ctx, pod, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPodInterface)(nil).Apply), ctx, pod, opts)
}

// ApplyStatus mocks base method.
func (m *MockPodInterface) ApplyStatus(ctx context.Context, pod *v12.PodApplyConfiguration, opts v11.ApplyOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", ctx, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockPodInterfaceMockRecorder) ApplyStatus(ctx, pod, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockPodInterface)(nil).ApplyStatus), ctx, pod, opts)
}

// Bind mocks base method.
func (m *MockPodInterface) Bind(ctx context.Context, binding *v1.Binding, opts v11.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, binding, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockPodInterfaceMockRecorder) Bind(ctx, binding, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockPodInterface)(nil).Bind), ctx, binding, opts)
}

// Create mocks base method.
func (m *MockPodInterface) Create(ctx context.Context, pod *v1.Pod, opts v11.CreateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPodInterfaceMockRecorder) Create(ctx, pod, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPodInterface)(nil).Create), ctx, pod, opts)
}

// Delete mocks base method.
func (m *MockPodInterface) Delete(ctx context.Context, name string, opts v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPodInterfaceMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPodInterface)(nil).Delete), ctx, name, opts)
}

// DeleteCollection mocks base method.
func (m *MockPodInterface) DeleteCollection(ctx context.Context, opts v11.DeleteOptions, listOpts v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPodInterfaceMockRecorder) DeleteCollection(ctx, opts, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPodInterface)(nil).DeleteCollection), ctx, opts, listOpts)
}

// Evict mocks base method.
func (m *MockPodInterface) Evict(ctx context.Context, eviction *v1beta1.Eviction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", ctx, eviction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockPodInterfaceMockRecorder) Evict(ctx, eviction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockPodInterface)(nil).Evict), ctx, eviction)
}

// EvictV1 mocks base method.
func (m *MockPodInterface) EvictV1(ctx context.Context, eviction *v10.Eviction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictV1", ctx, eviction)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictV1 indicates an expected call of EvictV1.
func (mr *MockPodInterfaceMockRecorder) EvictV1(ctx, eviction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictV1", reflect.TypeOf((*MockPodInterface)(nil).EvictV1), ctx, eviction)
}

// EvictV1beta1 mocks base method.
func (m *MockPodInterface) EvictV1beta1(ctx context.Context, eviction *v1beta1.Eviction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictV1beta1", ctx, eviction)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictV1beta1 indicates an expected call of EvictV1beta1.
func (mr *MockPodInterfaceMockRecorder) EvictV1beta1(ctx, eviction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictV1beta1", reflect.TypeOf((*MockPodInterface)(nil).EvictV1beta1), ctx, eviction)
}

// Get mocks base method.
func (m *MockPodInterface) Get(ctx context.Context, name string, opts v11.GetOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPodInterfaceMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPodInterface)(nil).Get), ctx, name, opts)
}

// GetLogs mocks base method.
func (m *MockPodInterface) GetLogs(name string, opts *v1.PodLogOptions) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", name, opts)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockPodInterfaceMockRecorder) GetLogs(name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockPodInterface)(nil).GetLogs), name, opts)
}

// List mocks base method.
func (m *MockPodInterface) List(ctx context.Context, opts v11.ListOptions) (*v1.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodInterfaceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockPodInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v11.PatchOptions, subresources ...string) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockPodInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPodInterface)(nil).Patch), varargs...)
}

// ProxyGet mocks base method.
func (m *MockPodInterface) ProxyGet(scheme, name, port, path string, params map[string]string) rest.ResponseWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyGet", scheme, name, port, path, params)
	ret0, _ := ret[0].(rest.ResponseWrapper)
	return ret0
}

// ProxyGet indicates an expected call of ProxyGet.
func (mr *MockPodInterfaceMockRecorder) ProxyGet(scheme, name, port, path, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGet", reflect.TypeOf((*MockPodInterface)(nil).ProxyGet), scheme, name, port, path, params)
}

// Update mocks base method.
func (m *MockPodInterface) Update(ctx context.Context, pod *v1.Pod, opts v11.UpdateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPodInterfaceMockRecorder) Update(ctx, pod, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPodInterface)(nil).Update), ctx, pod, opts)
}

// UpdateEphemeralContainers mocks base method.
func (m *MockPodInterface) UpdateEphemeralContainers(ctx context.Context, podName string, pod *v1.Pod, opts v11.UpdateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEphemeralContainers", ctx, podName, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEphemeralContainers indicates an expected call of UpdateEphemeralContainers.
func (mr *MockPodInterfaceMockRecorder) UpdateEphemeralContainers(ctx, podName, pod, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEphemeralContainers", reflect.TypeOf((*MockPodInterface)(nil).UpdateEphemeralContainers), ctx, podName, pod, opts)
}

// UpdateStatus mocks base method.
func (m *MockPodInterface) UpdateStatus(ctx context.Context, pod *v1.Pod, opts v11.UpdateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPodInterfaceMockRecorder) UpdateStatus(ctx, pod, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPodInterface)(nil).UpdateStatus), ctx, pod, opts)
}

// Watch mocks base method.
func (m *MockPodInterface) Watch(ctx context.Context, opts v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockPodInterfaceMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockPodInterface)(nil).Watch), ctx, opts)
}

// MockNodeInterface is a mock of NodeInterface interface.
type MockNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeInterfaceMockRecorder
	isgomock struct{}
}

// MockNodeInterfaceMockRecorder is the mock recorder for MockNodeInterface.
type MockNodeInterfaceMockRecorder struct {
	mock *MockNodeInterface
}

// NewMockNodeInterface creates a new mock instance.
func NewMockNodeInterface(ctrl *gomock.Controller) *MockNodeInterface {
	mock := &MockNodeInterface{ctrl: ctrl}
	mock.recorder = &MockNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeInterface) EXPECT() *MockNodeInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockNodeInterface) Apply(ctx context.Context, node *v12.NodeApplyConfiguration, opts v11.ApplyOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, node, opts)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockNodeInterfaceMockRecorder) Apply(ctx, node, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNodeInterface)(nil).Apply), ctx, node, opts)
}

// ApplyStatus mocks base method.
func (m *MockNodeInterface) ApplyStatus(ctx context.Context, node *v12.NodeApplyConfiguration, opts v11.ApplyOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", ctx, node, opts)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockNodeInterfaceMockRecorder) ApplyStatus(ctx, node, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockNodeInterface)(nil).ApplyStatus), ctx, node, opts)
}

// Create mocks base method.
func (m *MockNodeInterface) Create(ctx context.Context, node *v1.Node, opts v11.CreateOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, node, opts)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNodeInterfaceMockRecorder) Create(ctx, node, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeInterface)(nil).Create), ctx, node, opts)
}

// Delete mocks base method.
func (m *MockNodeInterface) Delete(ctx context.Context, name string, opts v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeInterfaceMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeInterface)(nil).Delete), ctx, name, opts)
}

// DeleteCollection mocks base method.
func (m *MockNodeInterface) DeleteCollection(ctx context.Context, opts v11.DeleteOptions, listOpts v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockNodeInterfaceMockRecorder) DeleteCollection(ctx, opts, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockNodeInterface)(nil).DeleteCollection), ctx, opts, listOpts)
}

// Get mocks base method.
func (m *MockNodeInterface) Get(ctx context.Context, name string, opts v11.GetOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeInterfaceMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeInterface)(nil).Get), ctx, name, opts)
}

// List mocks base method.
func (m *MockNodeInterface) List(ctx context.Context, opts v11.ListOptions) (*v1.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNodeInterfaceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockNodeInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v11.PatchOptions, subresources ...string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockNodeInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockNodeInterface)(nil).Patch), varargs...)
}

// PatchStatus mocks base method.
func (m *MockNodeInterface) PatchStatus(ctx context.Context, nodeName string, data []byte) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", ctx, nodeName, data)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockNodeInterfaceMockRecorder) PatchStatus(ctx, nodeName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockNodeInterface)(nil).PatchStatus), ctx, nodeName, data)
}

// Update mocks base method.
func (m *MockNodeInterface) Update(ctx context.Context, node *v1.Node, opts v11.UpdateOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, node, opts)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNodeInterfaceMockRecorder) Update(ctx, node, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNodeInterface)(nil).Update), ctx, node, opts)
}

// UpdateStatus mocks base method.
func (m *MockNodeInterface) UpdateStatus(ctx context.Context, node *v1.Node, opts v11.UpdateOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, node, opts)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNodeInterfaceMockRecorder) UpdateStatus(ctx, node, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNodeInterface)(nil).UpdateStatus), ctx, node, opts)
}

// Watch mocks base method.
func (m *MockNodeInterface) Watch(ctx context.Context, opts v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockNodeInterfaceMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNodeInterface)(nil).Watch), ctx, opts)
}

// MockNamespaceInterface is a mock of NamespaceInterface interface.
type MockNamespaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceInterfaceMockRecorder
	isgomock struct{}
}

// MockNamespaceInterfaceMockRecorder is the mock recorder for MockNamespaceInterface.
type MockNamespaceInterfaceMockRecorder struct {
	mock *MockNamespaceInterface
}

// NewMockNamespaceInterface creates a new mock instance.
func NewMockNamespaceInterface(ctrl *gomock.Controller) *MockNamespaceInterface {
	mock := &MockNamespaceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceInterface) EXPECT() *MockNamespaceInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockNamespaceInterface) Apply(ctx context.Context, namespace *v12.NamespaceApplyConfiguration, opts v11.ApplyOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, namespace, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockNamespaceInterfaceMockRecorder) Apply(ctx, namespace, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNamespaceInterface)(nil).Apply), ctx, namespace, opts)
}

// ApplyStatus mocks base method.
func (m *MockNamespaceInterface) ApplyStatus(ctx context.Context, namespace *v12.NamespaceApplyConfiguration, opts v11.ApplyOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", ctx, namespace, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockNamespaceInterfaceMockRecorder) ApplyStatus(ctx, namespace, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockNamespaceInterface)(nil).ApplyStatus), ctx, namespace, opts)
}

// Create mocks base method.
func (m *MockNamespaceInterface) Create(ctx context.Context, namespace *v1.Namespace, opts v11.CreateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, namespace, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNamespaceInterfaceMockRecorder) Create(ctx, namespace, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNamespaceInterface)(nil).Create), ctx, namespace, opts)
}

// Delete mocks base method.
func (m *MockNamespaceInterface) Delete(ctx context.Context, name string, opts v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceInterfaceMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespaceInterface)(nil).Delete), ctx, name, opts)
}

// Finalize mocks base method.
func (m *MockNamespaceInterface) Finalize(ctx context.Context, item *v1.Namespace, opts v11.UpdateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize", ctx, item, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalize indicates an expected call of Finalize.
func (mr *MockNamespaceInterfaceMockRecorder) Finalize(ctx, item, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockNamespaceInterface)(nil).Finalize), ctx, item, opts)
}

// Get mocks base method.
func (m *MockNamespaceInterface) Get(ctx context.Context, name string, opts v11.GetOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespaceInterfaceMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceInterface)(nil).Get), ctx, name, opts)
}

// List mocks base method.
func (m *MockNamespaceInterface) List(ctx context.Context, opts v11.ListOptions) (*v1.NamespaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.NamespaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNamespaceInterfaceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockNamespaceInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v11.PatchOptions, subresources ...string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockNamespaceInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockNamespaceInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockNamespaceInterface) Update(ctx context.Context, namespace *v1.Namespace, opts v11.UpdateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, namespace, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNamespaceInterfaceMockRecorder) Update(ctx, namespace, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceInterface)(nil).Update), ctx, namespace, opts)
}

// UpdateStatus mocks base method.
func (m *MockNamespaceInterface) UpdateStatus(ctx context.Context, namespace *v1.Namespace, opts v11.UpdateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, namespace, opts)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNamespaceInterfaceMockRecorder) UpdateStatus(ctx, namespace, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNamespaceInterface)(nil).UpdateStatus), ctx, namespace, opts)
}

// Watch mocks base method.
func (m *MockNamespaceInterface) Watch(ctx context.Context, opts v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockNamespaceInterfaceMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNamespaceInterface)(nil).Watch), ctx, opts)
}

// MockSecretInterface is a mock of SecretInterface interface.
type MockSecretInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecretInterfaceMockRecorder
	isgomock struct{}
}

// MockSecretInterfaceMockRecorder is the mock recorder for MockSecretInterface.
type MockSecretInterfaceMockRecorder struct {
	mock *MockSecretInterface
}

// NewMockSecretInterface creates a new mock instance.
func NewMockSecretInterface(ctrl *gomock.Controller) *MockSecretInterface {
	mock := &MockSecretInterface{ctrl: ctrl}
	mock.recorder = &MockSecretInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretInterface) EXPECT() *MockSecretInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockSecretInterface) Apply(ctx context.Context, secret *v12.SecretApplyConfiguration, opts v11.ApplyOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, secret, opts)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockSecretInterfaceMockRecorder) Apply(ctx, secret, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockSecretInterface)(nil).Apply), ctx, secret, opts)
}

// Create mocks base method.
func (m *MockSecretInterface) Create(ctx context.Context, secret *v1.Secret, opts v11.CreateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, secret, opts)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretInterfaceMockRecorder) Create(ctx, secret, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretInterface)(nil).Create), ctx, secret, opts)
}

// Delete mocks base method.
func (m *MockSecretInterface) Delete(ctx context.Context, name string, opts v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretInterfaceMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretInterface)(nil).Delete), ctx, name, opts)
}

// DeleteCollection mocks base method.
func (m *MockSecretInterface) DeleteCollection(ctx context.Context, opts v11.DeleteOptions, listOpts v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockSecretInterfaceMockRecorder) DeleteCollection(ctx, opts, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockSecretInterface)(nil).DeleteCollection), ctx, opts, listOpts)
}

// Get mocks base method.
func (m *MockSecretInterface) Get(ctx context.Context, name string, opts v11.GetOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretInterfaceMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretInterface)(nil).Get), ctx, name, opts)
}

// List mocks base method.
func (m *MockSecretInterface) List(ctx context.Context, opts v11.ListOptions) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretInterfaceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockSecretInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v11.PatchOptions, subresources ...string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockSecretInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockSecretInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockSecretInterface) Update(ctx context.Context, secret *v1.Secret, opts v11.UpdateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, secret, opts)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecretInterfaceMockRecorder) Update(ctx, secret, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretInterface)(nil).Update), ctx, secret, opts)
}

// Watch mocks base method.
func (m *MockSecretInterface) Watch(ctx context.Context, opts v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockSecretInterfaceMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSecretInterface)(nil).Watch), ctx, opts)
}
