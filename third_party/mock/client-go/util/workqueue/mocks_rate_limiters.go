// Code generated by MockGen. DO NOT EDIT.
// Source: default_rate_limiters.go
//
// Generated by this command:
//
//	mockgen -package workqueue -destination=mocks_rate_limiters.go -source=default_rate_limiters.go TypedRateLimiter
//

// Package workqueue is a generated GoMock package.
package workqueue

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTypedRateLimiter is a mock of TypedRateLimiter interface.
type MockTypedRateLimiter[T comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockTypedRateLimiterMockRecorder[T]
	isgomock struct{}
}

// MockTypedRateLimiterMockRecorder is the mock recorder for MockTypedRateLimiter.
type MockTypedRateLimiterMockRecorder[T comparable] struct {
	mock *MockTypedRateLimiter[T]
}

// NewMockTypedRateLimiter creates a new mock instance.
func NewMockTypedRateLimiter[T comparable](ctrl *gomock.Controller) *MockTypedRateLimiter[T] {
	mock := &MockTypedRateLimiter[T]{ctrl: ctrl}
	mock.recorder = &MockTypedRateLimiterMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypedRateLimiter[T]) EXPECT() *MockTypedRateLimiterMockRecorder[T] {
	return m.recorder
}

// Forget mocks base method.
func (m *MockTypedRateLimiter[T]) Forget(item T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forget", item)
}

// Forget indicates an expected call of Forget.
func (mr *MockTypedRateLimiterMockRecorder[T]) Forget(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockTypedRateLimiter[T])(nil).Forget), item)
}

// NumRequeues mocks base method.
func (m *MockTypedRateLimiter[T]) NumRequeues(item T) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumRequeues", item)
	ret0, _ := ret[0].(int)
	return ret0
}

// NumRequeues indicates an expected call of NumRequeues.
func (mr *MockTypedRateLimiterMockRecorder[T]) NumRequeues(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumRequeues", reflect.TypeOf((*MockTypedRateLimiter[T])(nil).NumRequeues), item)
}

// When mocks base method.
func (m *MockTypedRateLimiter[T]) When(item T) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "When", item)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// When indicates an expected call of When.
func (mr *MockTypedRateLimiterMockRecorder[T]) When(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "When", reflect.TypeOf((*MockTypedRateLimiter[T])(nil).When), item)
}
