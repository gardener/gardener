// Code generated by MockGen. DO NOT EDIT.
// Source: predicate.go
//
// Generated by this command:
//
//	mockgen -package predicate -destination=mocks.go -source=predicate.go Predicate
//

// Package predicate is a generated GoMock package.
package predicate

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	event "sigs.k8s.io/controller-runtime/pkg/event"
)

// MockTypedPredicate is a mock of TypedPredicate interface.
type MockTypedPredicate[object any] struct {
	ctrl     *gomock.Controller
	recorder *MockTypedPredicateMockRecorder[object]
}

// MockTypedPredicateMockRecorder is the mock recorder for MockTypedPredicate.
type MockTypedPredicateMockRecorder[object any] struct {
	mock *MockTypedPredicate[object]
}

// NewMockTypedPredicate creates a new mock instance.
func NewMockTypedPredicate[object any](ctrl *gomock.Controller) *MockTypedPredicate[object] {
	mock := &MockTypedPredicate[object]{ctrl: ctrl}
	mock.recorder = &MockTypedPredicateMockRecorder[object]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypedPredicate[object]) EXPECT() *MockTypedPredicateMockRecorder[object] {
	return m.recorder
}

// Create mocks base method.
func (m *MockTypedPredicate[object]) Create(arg0 event.TypedCreateEvent[object]) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTypedPredicateMockRecorder[object]) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTypedPredicate[object])(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockTypedPredicate[object]) Delete(arg0 event.TypedDeleteEvent[object]) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTypedPredicateMockRecorder[object]) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTypedPredicate[object])(nil).Delete), arg0)
}

// Generic mocks base method.
func (m *MockTypedPredicate[object]) Generic(arg0 event.TypedGenericEvent[object]) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockTypedPredicateMockRecorder[object]) Generic(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockTypedPredicate[object])(nil).Generic), arg0)
}

// Update mocks base method.
func (m *MockTypedPredicate[object]) Update(arg0 event.TypedUpdateEvent[object]) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTypedPredicateMockRecorder[object]) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTypedPredicate[object])(nil).Update), arg0)
}
