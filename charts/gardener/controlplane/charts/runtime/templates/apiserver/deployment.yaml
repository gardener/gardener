{{- if .Values.global.apiserver.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gardener-apiserver
  namespace: garden
  labels:
    app: gardener
    role: apiserver
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ required ".Values.global.apiserver.replicaCount is required" .Values.global.apiserver.replicaCount }}
  minReadySeconds: {{ .Values.global.apiserver.minReadySeconds }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
{{ toYaml .Values.global.apiserver.rollingUpdate | indent 6 }}
  selector:
    matchLabels:
      app: gardener
      role: apiserver
  template:
    metadata:
      annotations:
        {{- if .Values.global.apiserver.audit.policy }}
        checksum/configmap-gardener-audit-policy-config: {{ include (print $.Template.BasePath "/apiserver/configmap-audit-policy.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.config }}
        checksum/secret-gardener-audit-webhook-config: {{ include (print $.Template.BasePath "/apiserver/secret-audit-webhook-config.yaml") . | sha256sum }}
        {{- end }}
        checksum/secret-gardener-apiserver-cert: {{ include (print $.Template.BasePath "/apiserver/secret-cert.yaml") . | sha256sum }}
        {{- if .Values.global.apiserver.encryption.config }}
        checksum/secret-gardener-apiserver-encryption-config: {{ include (print $.Template.BasePath "/apiserver/secret-encryption-config.yaml") . | sha256sum }}
        {{- end }}
        checksum/secret-gardener-apiserver-kubeconfig: {{ include (print $.Template.BasePath "/apiserver/secret-kubeconfig.yaml") . | sha256sum }}
        {{- if (include "gardener-apiserver.hasAdmissionPlugins" .) }}
        checksum/configmap-gardener-apiserver-admission-config: {{ include (print $.Template.BasePath "/apiserver/configmap-admission-config.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.global.apiserver.workloadIdentity.token.signing.key }}
        checksum/secret-gardener-apiserver-workload-identity-signing-key: {{ include (print $.Template.BasePath "/apiserver/secret-workload-identity.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.global.apiserver.podAnnotations }}
{{ toYaml .Values.global.apiserver.podAnnotations | indent 8 }}
        {{- end }}
      labels:
        app: gardener
        role: apiserver
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        {{- if .Values.global.apiserver.etcd.useSidecar }}
        sidecar: etcd
        {{- end }}
        {{- if .Values.global.apiserver.podLabels }}
{{ toYaml .Values.global.apiserver.podLabels | indent 8 }}
        {{- end }}
    spec:
      priorityClassName: gardener-controlplane
      {{- if not .Values.global.deployment.virtualGarden.enabled }}
      serviceAccountName: {{ required ".Values.global.apiserver.serviceAccountName is required" .Values.global.apiserver.serviceAccountName }}
      {{- else if and .Values.global.deployment.virtualGarden.enabled .Values.global.deployment.virtualGarden.apiserver.user.name }}
        {{- if .Values.global.apiserver.serviceAccountTokenVolumeProjection.enabled }}
      serviceAccountName: {{ required ".Values.global.apiserver.serviceAccountName is required" .Values.global.apiserver.serviceAccountName }}
        {{- else }}
      serviceAccountName: default
        {{- end }}
      {{- else }}
      serviceAccountName: default
      {{- end }}
      {{- if .Values.global.apiserver.kubeconfig }}
      automountServiceAccountToken: false
      {{- end }}
      {{- if gt (int .Values.global.apiserver.replicaCount) 1 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - gardener
                - key: role
                  operator: In
                  values:
                  - apiserver
              topologyKey: kubernetes.io/hostname
            weight: 1
      {{- end }}
      containers:
      - name: gardener-apiserver
        image: {{ include "image" .Values.global.apiserver.image }}
        imagePullPolicy: {{ .Values.global.apiserver.image.pullPolicy }}
        args:
        {{- if (include "gardener-apiserver.hasAdmissionPlugins" .) }}
        - --admission-control-config-file=/etc/gardener-apiserver/admission/configuration.yaml
        {{- end }}
        {{- if .Values.global.apiserver.audit.dynamicConfiguration }}
        - --audit-dynamic-configuration={{ .Values.global.apiserver.audit.dynamicConfiguration }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.batchBufferSize }}
        - --audit-log-batch-buffer-size={{ .Values.global.apiserver.audit.log.batchBufferSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.batchMaxSize }}
        - --audit-log-batch-max-size={{ .Values.global.apiserver.audit.log.batchMaxSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.batchMaxWait }}
        - --audit-log-batch-max-wait={{ .Values.global.apiserver.audit.log.batchMaxWait }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.batchThrottleBurst }}
        - --audit-log-batch-throttle-burst={{ .Values.global.apiserver.audit.log.batchThrottleBurst }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.batchThrottleEnable }}
        - --audit-log-batch-throttle-enable={{ .Values.global.apiserver.audit.log.batchThrottleEnable }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.batchThrottleQPS }}
        - --audit-log-batch-throttle-qps={{ .Values.global.apiserver.audit.log.batchThrottleQPS }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.format }}
        - --audit-log-format={{ .Values.global.apiserver.audit.log.format }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.maxAge }}
        - --audit-log-maxage={{ .Values.global.apiserver.audit.log.maxAge }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.maxBackup }}
        - --audit-log-maxbackup={{ .Values.global.apiserver.audit.log.maxBackup }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.maxSize }}
        - --audit-log-maxsize={{ .Values.global.apiserver.audit.log.maxSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.mode }}
        - --audit-log-mode={{ .Values.global.apiserver.audit.log.mode }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.path }}
        - --audit-log-path={{ .Values.global.apiserver.audit.log.path }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.truncateEnabled }}
        - --audit-log-truncate-enabled={{ .Values.global.apiserver.audit.log.truncateEnabled }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.truncateMaxBatchSize }}
        - --audit-log-truncate-max-batch-size={{ .Values.global.apiserver.audit.log.truncateMaxBatchSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.truncateMaxEventSize }}
        - --audit-log-truncate-max-event-size={{ .Values.global.apiserver.audit.log.truncateMaxEventSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.log.version }}
        - --audit-log-version={{ .Values.global.apiserver.audit.log.version }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.policy }}
        - --audit-policy-file=/etc/gardener-apiserver/audit/audit-policy.yaml
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.batchBufferSize }}
        - --audit-webhook-batch-buffer-size={{ .Values.global.apiserver.audit.webhook.batchBufferSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.batchMaxSize }}
        - --audit-webhook-batch-max-size={{ .Values.global.apiserver.audit.webhook.batchMaxSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.batchMaxWait }}
        - --audit-webhook-batch-max-wait={{ .Values.global.apiserver.audit.webhook.batchMaxWait }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.batchThrottleBurst }}
        - --audit-webhook-batch-throttle-burst={{ .Values.global.apiserver.audit.webhook.batchThrottleBurst }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.batchThrottleEnable }}
        - --audit-webhook-batch-throttle-enable={{ .Values.global.apiserver.audit.webhook.batchThrottleEnable }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.batchThrottleQPS }}
        - --audit-webhook-batch-throttle-qps={{ .Values.global.apiserver.audit.webhook.batchThrottleQPS }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.config }}
        - --audit-webhook-config-file=/etc/gardener-apiserver/auditwebhook/audit-webhook-config.yaml
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.initialBackoff }}
        - --audit-webhook-initial-backoff={{ .Values.global.apiserver.audit.webhook.initialBackoff }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.mode }}
        - --audit-webhook-mode={{ .Values.global.apiserver.audit.webhook.mode }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.truncateEnabled }}
        - --audit-webhook-truncate-enabled={{ .Values.global.apiserver.audit.webhook.truncateEnabled }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.truncateMaxBatchSize }}
        - --audit-webhook-truncate-max-batch-size={{ .Values.global.apiserver.audit.webhook.truncateMaxBatchSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.truncateMaxEventSize }}
        - --audit-webhook-truncate-max-event-size={{ .Values.global.apiserver.audit.webhook.truncateMaxEventSize }}
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.version }}
        - --audit-webhook-version={{ .Values.global.apiserver.audit.webhook.version }}
        {{- end }}
        - --authorization-always-allow-paths=/healthz
        - --cluster-identity={{ required ".Values.global.apiserver.clusterIdentity is required" .Values.global.apiserver.clusterIdentity }}
        {{- if .Values.global.apiserver.disableAdmissionPlugins }}
        - --disable-admission-plugins={{ .Values.global.apiserver.disableAdmissionPlugins | join "," }}
        {{- end }}
        {{- if .Values.global.apiserver.enableAdmissionPlugins }}
        - --enable-admission-plugins={{ .Values.global.apiserver.enableAdmissionPlugins | join "," }}
        {{- end }}
        {{- if .Values.global.apiserver.encryption.config }}
        - --encryption-provider-config=/etc/gardener-apiserver/encryption/encryption-config.yaml
        {{- end }}
        {{- if .Values.global.apiserver.etcd.useSidecar }}
        - --etcd-servers=http://localhost:2379
        {{- else }}
        - --etcd-servers={{ required ".Values.global.apiserver.etcd.servers is required" .Values.global.apiserver.etcd.servers }}
        {{- if .Values.global.apiserver.etcd.tlsSecretName }}
        - --etcd-cafile=/etc/gardener-apiserver/srv/etcd/ca.crt
        - --etcd-certfile=/etc/gardener-apiserver/srv/etcd/tls.crt
        - --etcd-keyfile=/etc/gardener-apiserver/srv/etcd/tls.key
        {{- else if and .Values.global.apiserver.etcd.caBundleSecretName .Values.global.apiserver.etcd.clientCertSecretName }}
        - --etcd-cafile=/etc/gardener-apiserver/srv/etcd/ca/bundle.crt
        - --etcd-certfile=/etc/gardener-apiserver/srv/etcd/client/tls.crt
        - --etcd-keyfile=/etc/gardener-apiserver/srv/etcd/client/tls.key
        {{- else }}
        {{- if .Values.global.apiserver.etcd.caBundle }}
        - --etcd-cafile=/etc/gardener-apiserver/srv/etcd-client-ca.crt
        {{- end }}
        {{- if .Values.global.apiserver.etcd.tls }}
        - --etcd-certfile=/etc/gardener-apiserver/srv/etcd-client.crt
        {{- end }}
        {{- if .Values.global.apiserver.etcd.tls }}
        - --etcd-keyfile=/etc/gardener-apiserver/srv/etcd-client.key
        {{- end }}
        {{- end }}
        {{- end }}
        {{- include "gardener-apiserver.featureGates" . | trimSuffix "," | indent 8 }}
        {{- if .Values.global.apiserver.goAwayChance }}
        - --goaway-chance={{ .Values.global.apiserver.goAwayChance }}
        {{- end }}
        {{- if .Values.global.apiserver.http2MaxStreamsPerConnection }}
        - --http2-max-streams-per-connection={{ .Values.global.apiserver.http2MaxStreamsPerConnection }}
        {{- end }}
        {{- if .Values.global.apiserver.kubeconfig }}
        - --authentication-kubeconfig=/etc/gardener-apiserver/kubeconfig/kubeconfig
        - --authorization-kubeconfig=/etc/gardener-apiserver/kubeconfig/kubeconfig
        - --kubeconfig=/etc/gardener-apiserver/kubeconfig/kubeconfig
        {{- end }}
        {{- if .Values.global.apiserver.requests }}
        {{- if .Values.global.apiserver.requests.maxMutatingInflight }}
        - --max-mutating-requests-inflight={{ .Values.global.apiserver.requests.maxMutatingInflight }}
        {{- end }}
        {{- if .Values.global.apiserver.requests.maxNonMutatingInflight }}
        - --max-requests-inflight={{ .Values.global.apiserver.requests.maxNonMutatingInflight }}
        {{- end }}
        {{- if .Values.global.apiserver.requests.minTimeout }}
        - --min-request-timeout={{ .Values.global.apiserver.requests.minTimeout }}
        {{- end }}
        {{- if .Values.global.apiserver.requests.timeout }}
        - --request-timeout={{ .Values.global.apiserver.requests.timeout }}
        {{- end }}
        {{- end }}
        - --secure-port={{ .Values.global.apiserver.securePort | default 8443 }}
        {{- if .Values.global.apiserver.shootAdminKubeconfigMaxExpiration }}
        - --shoot-admin-kubeconfig-max-expiration={{ .Values.global.apiserver.shootAdminKubeconfigMaxExpiration }}
        {{- end }}
        {{- if .Values.global.apiserver.shootViewerKubeconfigMaxExpiration }}
        - --shoot-viewer-kubeconfig-max-expiration={{ .Values.global.apiserver.shootViewerKubeconfigMaxExpiration }}
        {{- end }}
        {{- if .Values.global.apiserver.shootCredentialsRotationInterval }}
        - --shoot-credentials-rotation-interval={{ .Values.global.apiserver.shootCredentialsRotationInterval }}
        {{- end }}
        {{- if .Values.global.apiserver.shutdownDelayDuration }}
        - --shutdown-delay-duration={{ .Values.global.apiserver.shutdownDelayDuration }}
        {{- end }}
        {{- if .Values.global.apiserver.tlsSecretName }}
        - --tls-cert-file=/etc/gardener-apiserver/srv/tls/tls.crt
        - --tls-private-key-file=/etc/gardener-apiserver/srv/tls/tls.key
        {{- else if and .Values.global.apiserver.tls.crt .Values.global.apiserver.tls.key }}
        - --tls-cert-file=/etc/gardener-apiserver/srv/gardener-apiserver.crt
        - --tls-private-key-file=/etc/gardener-apiserver/srv/gardener-apiserver.key
        {{- end }}
        {{- include "gardener-apiserver.watchCacheSizes" . | indent 8 }}
        {{- if .Values.global.apiserver.workloadIdentity.token.issuer }}
        - --workload-identity-token-issuer={{ .Values.global.apiserver.workloadIdentity.token.issuer }}
        {{- end }}
        - --workload-identity-token-min-expiration={{ .Values.global.apiserver.workloadIdentity.token.minExpiration }}
        - --workload-identity-token-max-expiration={{ .Values.global.apiserver.workloadIdentity.token.maxExpiration }}
        {{- if or .Values.global.apiserver.workloadIdentity.token.signing.secretName .Values.global.apiserver.workloadIdentity.token.signing.key }}
        - --workload-identity-signing-key-file=/etc/gardener-apiserver/workload-identity/signing/key.pem
        {{- end }}
        - --log-level={{ .Values.global.apiserver.logLevel | default "info"  }}
        - --log-format={{ .Values.global.apiserver.logFormat | default "json"  }}
        - --v={{ .Values.global.apiserver.logVerbosity | default "2"  }}
        {{- if .Values.global.apiserver.livenessProbe.enable }}
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /livez
            port: {{ .Values.global.apiserver.securePort | default 8443 }}
          initialDelaySeconds: {{ .Values.global.apiserver.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.global.apiserver.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.global.apiserver.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.global.apiserver.livenessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.global.apiserver.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.global.apiserver.readinessProbe.enable }}
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /readyz
            port: {{ .Values.global.apiserver.securePort | default 8443 }}
          initialDelaySeconds: {{ .Values.global.apiserver.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.global.apiserver.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.global.apiserver.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.global.apiserver.readinessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.global.apiserver.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.global.apiserver.resources }}
        resources:
{{ toYaml .Values.global.apiserver.resources | indent 10 }}
        {{- end }}
        {{- if .Values.global.apiserver.dnsConfig }}
        dnsConfig:
{{ toYaml .Values.global.apiserver.dnsConfig | indent 10 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.global.apiserver.encryption.config }}
        - name: gardener-apiserver-encryption-config
          mountPath: /etc/gardener-apiserver/encryption
        {{- end }}
        {{- if or (not .Values.global.apiserver.tlsSecretName) (not .Values.global.apiserver.etcd.tlsSecretName) }}
        - name: gardener-apiserver-cert
          mountPath: /etc/gardener-apiserver/srv
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.tlsSecretName }}
        - name: gardener-apiserver-tls
          mountPath: /etc/gardener-apiserver/srv/tls
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.etcd.tlsSecretName }}
        - name: gardener-etcd-client-tls
          mountPath: /etc/gardener-apiserver/srv/etcd/
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.etcd.caBundleSecretName }}
        - name: gardener-etcd-ca-bundle
          mountPath: /etc/gardener-apiserver/srv/etcd/ca/
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.etcd.clientCertSecretName }}
        - name: gardener-etcd-client-cert
          mountPath: /etc/gardener-apiserver/srv/etcd/client/
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.kubeconfig }}
        - name: gardener-apiserver-kubeconfig
          mountPath: /etc/gardener-apiserver/kubeconfig
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.serviceAccountTokenVolumeProjection.enabled }}
        - name: service-account-token
          mountPath: /var/run/secrets/projected/serviceaccount
          readOnly: true
        {{- end }}
        {{- if .Values.global.apiserver.audit.policy }}
        - name: gardener-audit-policy-config
          mountPath: /etc/gardener-apiserver/audit
        {{- end }}
        {{- if .Values.global.apiserver.audit.webhook.config }}
        - name: gardener-audit-webhook-config
          mountPath: /etc/gardener-apiserver/auditwebhook
        {{- end }}
        {{- if (include "gardener-apiserver.hasAdmissionPlugins" .) }}
        - name: gardener-apiserver-admission-config
          mountPath: /etc/gardener-apiserver/admission
        {{- end }}
        {{- if (include "gardener-apiserver.hasAdmissionKubeconfig" .) }}
        - name: gardener-apiserver-admission-kubeconfig
          mountPath: /var/run/secrets/admission-kubeconfig
        {{- end }}
        {{- if (include "gardener-apiserver.hasWebhookTokens" .) }}
        - name: gardener-apiserver-admission-tokens
          mountPath: /var/run/secrets/admission-tokens
        {{- end }}
        {{- if or .Values.global.apiserver.workloadIdentity.token.signing.secretName .Values.global.apiserver.workloadIdentity.token.signing.key }}
        - name: gardener-apiserver-workload-identity-signing-key
          mountPath: /etc/gardener-apiserver/workload-identity/signing
        {{- end }}
      {{- if .Values.global.apiserver.etcd.useSidecar }}
      - name: etcd
        image: quay.io/coreos/etcd:v3.3.12
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        - --data-dir=/var/etcd/data
        - --name=etcd
        - --advertise-client-urls=http://etcd:2379
        - --listen-peer-urls=http://0.0.0.0:2380
        - --listen-client-urls=http://0.0.0.0:2379
        - --initial-advertise-peer-urls=http://etcd:2380
        - --initial-cluster=etcd=http://etcd:2380
        - --initial-cluster-state=new
        - --initial-cluster-token=new
        livenessProbe:
          httpGet:
            port: 2379
            path: /health
          initialDelaySeconds: 15
          timeoutSeconds: 15
        ports:
        - name: serverport
          containerPort: 2380
        - name: clientport
          containerPort: 2379
        resources:
          requests:
            cpu: 200m
        volumeMounts:
        - name: etcd
          mountPath: /var/etcd/data
      {{- end }}
      volumes:
      {{- if .Values.global.apiserver.encryption.config }}
      - name: gardener-apiserver-encryption-config
        secret:
          secretName: gardener-apiserver-encryption-config
      {{- end }}
      {{- if .Values.global.apiserver.etcd.useSidecar }}
      - name: etcd
        emptyDir: {}
      {{- end }}
      {{- if or (not .Values.global.apiserver.tlsSecretName) (not .Values.global.apiserver.etcd.tlsSecretName) }}
      - name: gardener-apiserver-cert
        secret:
          secretName: gardener-apiserver-cert
      {{- end }}
      {{- if .Values.global.apiserver.tlsSecretName }}
      - name: gardener-apiserver-tls
        secret:
          secretName: {{ .Values.global.apiserver.tlsSecretName }}
      {{- end }}
      {{- if .Values.global.apiserver.etcd.tlsSecretName }}
      - name: gardener-etcd-client-tls
        secret:
          secretName: {{ .Values.global.apiserver.etcd.tlsSecretName }}
      {{- end }}
      {{- if .Values.global.apiserver.etcd.caBundleSecretName }}
      - name: gardener-etcd-ca-bundle
        secret:
          secretName: {{ .Values.global.apiserver.etcd.caBundleSecretName }}
      {{- end }}
      {{- if .Values.global.apiserver.etcd.clientCertSecretName }}
      - name: gardener-etcd-client-cert
        secret:
          secretName: {{ .Values.global.apiserver.etcd.clientCertSecretName }}
      {{- end }}
      {{- if .Values.global.apiserver.kubeconfig }}
      - name: gardener-apiserver-kubeconfig
        secret:
          secretName: gardener-apiserver-kubeconfig
      {{- end }}
      {{- if .Values.global.apiserver.serviceAccountTokenVolumeProjection.enabled }}
      - name: service-account-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              expirationSeconds: {{ .Values.global.apiserver.serviceAccountTokenVolumeProjection.expirationSeconds }}
              {{- if .Values.global.apiserver.serviceAccountTokenVolumeProjection.audience }}
              audience: {{ .Values.global.apiserver.serviceAccountTokenVolumeProjection.audience }}
              {{- end }}
      {{- end }}
      {{- if .Values.global.apiserver.audit.policy }}
      - name: gardener-audit-policy-config
        configMap:
          name: gardener-audit-policy-config
      {{- end }}
      {{- if .Values.global.apiserver.audit.webhook.config }}
      - name: gardener-audit-webhook-config
        secret:
          secretName: gardener-audit-webhook-config
      {{- end }}
      {{- if (include "gardener-apiserver.hasAdmissionPlugins" .) }}
      - name: gardener-apiserver-admission-config
        configMap:
          name: gardener-apiserver-admission-config
      {{- end }}
      {{- if (include "gardener-apiserver.hasAdmissionKubeconfig" .) }}
      - name: gardener-apiserver-admission-kubeconfig
        secret:
          secretName: gardener-apiserver-admission-kubeconfig
      {{- end }}
      {{- if (include "gardener-apiserver.hasWebhookTokens" .) }}
      - name: gardener-apiserver-admission-tokens
        projected:
          sources:
          {{- if .Values.global.apiserver.admission.validatingWebhook.token.enabled }}
          - serviceAccountToken:
              path: validating-webhook-token
              expirationSeconds: {{ .Values.global.apiserver.admission.validatingWebhook.token.expirationSeconds }}
              audience: {{ .Values.global.apiserver.admission.validatingWebhook.token.audience }}
          {{- end }}
          {{- if .Values.global.apiserver.admission.mutatingWebhook.token.enabled }}
          - serviceAccountToken:
              path: mutating-webhook-token
              expirationSeconds: {{ .Values.global.apiserver.admission.mutatingWebhook.token.expirationSeconds }}
              audience: {{ .Values.global.apiserver.admission.mutatingWebhook.token.audience }}
          {{- end }}
      {{- end }}
      {{- if .Values.global.apiserver.workloadIdentity.token.signing }}
      - name: gardener-apiserver-workload-identity-signing-key
        secret:
          {{- if .Values.global.apiserver.workloadIdentity.token.signing.secretName }}
          secretName: {{ .Values.global.apiserver.workloadIdentity.token.signing.secretName }}
          {{- else if .Values.global.apiserver.workloadIdentity.token.signing.key  }}
          secretName: gardener-apiserver-workload-identity-signing-key
          {{- end }}
      {{- end }}
{{- if .Values.global.apiserver.etcd.useSidecar }}
---
apiVersion: v1
kind: Service
metadata:
  name: etcd
  namespace: garden
  labels:
    sidecar: etcd
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    sidecar: etcd
  ports:
  - name: discovery
    protocol: TCP
    port: 2380
    targetPort: 2380
  - name: client
    protocol: TCP
    port: 2379
    targetPort: 2379
{{- end }}
{{- end }}
