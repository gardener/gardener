// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

package main

import (
	"fmt"
	"io/fs"
	"os"
	"path/filepath"

	"github.com/onsi/ginkgo/v2/reporters"
	"github.com/spf13/cobra"
)

func main() {
	const short = "Merge and cleanup junit.xml files generated by ginkgo test suites"
	cmd := &cobra.Command{
		Use: "report-collector destination_file [source_dir]",

		Short: short,
		Long: short + `

report-collector is supposed to run after tests suites have been executed using --ginkgo.junit-report=junit.xml.
It merges all junit.xml files generated by ginkgo test suites under source_dir (or $PWD by default) into a single
file at destination_file and cleans up the original report files.
The tool reuses code from the ginkgo CLI which accomplishes exactly this. It is used for bridging the gap between
performant parallel test execution via go test and automated report collection via ginkgo.
(see https://github.com/gardener/gardener/pull/5784)
`,

		Args: cobra.MinimumNArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			dest := args[0]

			var src string
			if len(args) > 1 {
				src = args[1]
			} else {
				pwd, err := os.Getwd()
				if err != nil {
					return err
				}
				src = pwd
			}

			// find junit.xml files
			var matches []string
			if err := filepath.Walk(src, func(path string, info fs.FileInfo, err error) error {
				switch filepath.Base(path) {
				case "junit.xml":
					matches = append(matches, path)
					return nil
				}
				return nil
			}); err != nil {
				return err
			}

			if len(matches) == 0 {
				fmt.Println("no junit.xml files found")
				return nil
			}

			// merge and cleanup
			messages, err := reporters.MergeAndCleanupJUnitReports(matches, dest)
			for _, message := range messages {
				fmt.Println(message)
			}

			return err
		},
	}

	if err := cmd.Execute(); err != nil {
		panic(err)
	}
}
